

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Apr 01 11:11:58 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42   000000                     
    43                           ; Version 2.40
    44                           ; Generated 17/11/2021 GMT
    45                           ; 
    46                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4520 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78   000000                     
    79                           	psect	idataCOMRAM
    80   0010CC                     __pidataCOMRAM:
    81                           	callstack 0
    82                           
    83                           ;initializer for _pucReadDispBuffer
    84   0010CC  2F                 	db	low _ucDispBuffer1
    85   0010CD  00                 	db	high _ucDispBuffer1
    86                           
    87                           ;initializer for _outputCounter
    88   0010CE  0002               	dw	2
    89                           
    90                           ;initializer for _ucPassword
    91   0010D0  0F                 	db	15
    92                           
    93                           ;initializer for _sec60Counter
    94   0010D1  3C                 	db	60
    95                           
    96                           	psect	smallconst
    97   000600                     __psmallconst:
    98                           	callstack 0
    99   000600  00                 	db	0
   100   000601                     _int2sevenSeg:
   101                           	callstack 0
   102   000601  3F                 	db	63
   103   000602  06                 	db	6
   104   000603  5B                 	db	91
   105   000604  4F                 	db	79
   106   000605  66                 	db	102
   107   000606  6D                 	db	109
   108   000607  7D                 	db	125
   109   000608  07                 	db	7
   110   000609  7F                 	db	127
   111   00060A  6F                 	db	111
   112   00060B  77                 	db	119
   113   00060C  7C                 	db	124
   114   00060D  39                 	db	57
   115   00060E  5E                 	db	94
   116   00060F  79                 	db	121
   117   000610  71                 	db	113
   118   000611  3D                 	db	61
   119   000612  74                 	db	116
   120   000613  04                 	db	4
   121   000614  1E                 	db	30
   122   000615  36                 	db	54
   123   000616  38                 	db	56
   124   000617  53                 	db	83
   125   000618  54                 	db	84
   126   000619  5C                 	db	92
   127   00061A  73                 	db	115
   128   00061B  53                 	db	83
   129   00061C  50                 	db	80
   130   00061D  6D                 	db	109
   131   00061E  78                 	db	120
   132   00061F  3E                 	db	62
   133   000620  1C                 	db	28
   134   000621  53                 	db	83
   135   000622  53                 	db	83
   136   000623  6E                 	db	110
   137   000624  53                 	db	83
   138   000625  00                 	db	0
   139   000626  40                 	db	64
   140   000627  53                 	db	83
   141   000628                     __end_of_int2sevenSeg:
   142                           	callstack 0
   143   000000                     _EEDATA	set	4008
   144   000000                     _EEADR	set	4009
   145   000000                     _EECON2	set	4007
   146   000000                     _IPR1bits	set	3999
   147   000628  00                 	db	0	; dummy byte at the end
   148   000000                     
   149                           	psect	nvCOMRAM
   150   000053                     __pnvCOMRAM:
   151                           	callstack 0
   152   000053                     _pucDispBuffer:
   153                           	callstack 0
   154   000053                     	ds	2
   155   000000                     _TRISAbits	set	3986
   156   000000                     _ADCON0bits	set	4034
   157   000000                     _LVDCONbits	set	4050
   158   000000                     _CCP1CONbits	set	4029
   159   000000                     _T0CONbits	set	4053
   160   000000                     _PORTBbits	set	3969
   161   000000                     _LATBbits	set	3978
   162   000000                     _TRISBbits	set	3987
   163   000000                     _TRISCbits	set	3988
   164   000000                     _RCONbits	set	4048
   165   000000                     _LVDCON	set	4050
   166   000000                     _T0CON	set	4053
   167   000000                     _TMR0L	set	4054
   168   000000                     _INTCONbits	set	4082
   169   000000                     _TABLAT	set	4085
   170   000000                     _TBLPTRL	set	4086
   171   000000                     _TBLPTRH	set	4087
   172   000000                     _TBLPTRU	set	4088
   173   000000                     _TMR0H	set	4055
   174   000000                     _INTCON2bits	set	4081
   175   000000                     _PIE1bits	set	3997
   176   000000                     _PIR1bits	set	3998
   177   000000                     _PIE2bits	set	4000
   178   000000                     _PIR2bits	set	4001
   179   000000                     _T3CON	set	4017
   180   000000                     _TRISD	set	3989
   181   000000                     _TRISA	set	3986
   182   000000                     _LATD	set	3980
   183   000000                     _LATCbits	set	3979
   184   000000                     _CCP1CON	set	4029
   185   000000                     _PR2	set	4043
   186   000000                     _TMR3H	set	4019
   187   000000                     _TMR3L	set	4018
   188   000000                     _EECON1bits	set	4006
   189   000000                     _RCSTAbits	set	4011
   190   000000                     _TXSTAbits	set	4012
   191   000000                     _IPR2bits	set	4002
   192   000000                     _ADCON2	set	4032
   193   000000                     _ADCON1	set	4033
   194   000000                     _ADCON0	set	4034
   195   000000                     _CCPR1L	set	4030
   196   000000                     _T2CON	set	4042
   197   000000                     _ADRES	set	4035
   198   000000                     _SPBRG	set	4015
   199                           
   200                           ; #config settings
   201                           
   202                           	psect	cinit
   203   000F2C                     __pcinit:
   204                           	callstack 0
   205   000F2C                     start_initialization:
   206                           	callstack 0
   207   000F2C                     __initialization:
   208                           	callstack 0
   209                           
   210                           ; Initialize objects allocated to COMRAM (6 bytes)
   211                           ; load TBLPTR registers with __pidataCOMRAM
   212   000F2C  0ECC               	movlw	low __pidataCOMRAM
   213   000F2E  6EF6               	movwf	tblptrl,c
   214   000F30  0E10               	movlw	high __pidataCOMRAM
   215   000F32  6EF7               	movwf	tblptrh,c
   216   000F34  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   217   000F36  6EF8               	movwf	tblptru,c
   218   000F38  EE00  F04D         	lfsr	0,__pdataCOMRAM
   219   000F3C  EE10 F006          	lfsr	1,6
   220   000F40                     copy_data0:
   221   000F40  0009               	tblrd		*+
   222   000F42  CFF5 FFEE          	movff	tablat,postinc0
   223   000F46  50E5               	movf	postdec1,w,c
   224   000F48  50E1               	movf	fsr1l,w,c
   225   000F4A  E1FA               	bnz	copy_data0
   226                           
   227                           ; Clear objects allocated to COMRAM (51 bytes)
   228   000F4C  EE00  F001         	lfsr	0,__pbssCOMRAM
   229   000F50  0E33               	movlw	51
   230   000F52                     clear_0:
   231   000F52  6AEE               	clrf	postinc0,c
   232   000F54  06E8               	decf	wreg,f,c
   233   000F56  E1FD               	bnz	clear_0
   234   000F58                     end_of_initialization:
   235                           	callstack 0
   236   000F58                     __end_of__initialization:
   237                           	callstack 0
   238   000F58  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   239   000F5A  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   240   000F5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   241   000F5E  6EF8               	movwf	tblptru,c
   242   000F60  0100               	movlb	0
   243   000F62  EF15  F003         	goto	_main	;jump to C main() function
   244                           
   245                           	psect	bssCOMRAM
   246   000001                     __pbssCOMRAM:
   247                           	callstack 0
   248   000001                     _iADCValCh2:
   249                           	callstack 0
   250   000001                     	ds	2
   251   000003                     _iADCValCh1:
   252                           	callstack 0
   253   000003                     	ds	2
   254   000005                     _filter:
   255                           	callstack 0
   256   000005                     	ds	2
   257   000007                     _filterCount:
   258                           	callstack 0
   259   000007                     	ds	2
   260   000009                     displayISR@uiTickCount:
   261                           	callstack 0
   262   000009                     	ds	2
   263   00000B                     _uiTemp:
   264                           	callstack 0
   265   00000B                     	ds	2
   266   00000D                     _fps:
   267                           	callstack 0
   268   00000D                     	ds	2
   269   00000F                     _fpsCounter:
   270                           	callstack 0
   271   00000F                     	ds	2
   272   000011                     _ucScanChannel:
   273                           	callstack 0
   274   000011                     	ds	1
   275   000012                     displayISR@keyPressCounter:
   276                           	callstack 0
   277   000012                     	ds	1
   278   000013                     displayISR@keyStateSaved:
   279                           	callstack 0
   280   000013                     	ds	1
   281   000014                     displayISR@keyStatus:
   282                           	callstack 0
   283   000014                     	ds	1
   284   000015                     displayISR@ucDispIndx:
   285                           	callstack 0
   286   000015                     	ds	1
   287   000016                     _bToggleBitSlow:
   288                           	callstack 0
   289   000016                     	ds	1
   290   000017                     _bToggleBitFast:
   291                           	callstack 0
   292   000017                     	ds	1
   293   000018                     _tick3000mSec:
   294                           	callstack 0
   295   000018                     	ds	1
   296   000019                     _tick1000mSec2:
   297                           	callstack 0
   298   000019                     	ds	1
   299   00001A                     _tick500mSec:
   300                           	callstack 0
   301   00001A                     	ds	1
   302   00001B                     _bRequestBufferReleaseForWriting:
   303                           	callstack 0
   304   00001B                     	ds	1
   305   00001C                     _bUseDispBuffer1ForReading:
   306                           	callstack 0
   307   00001C                     	ds	1
   308   00001D                     _alarmLatch:
   309                           	callstack 0
   310   00001D                     	ds	1
   311   00001E                     _outputLatch:
   312                           	callstack 0
   313   00001E                     	ds	1
   314   00001F                     _interruptFlagDisp:
   315                           	callstack 0
   316   00001F                     	ds	1
   317   000020                     _interruptFlag:
   318                           	callstack 0
   319   000020                     	ds	1
   320   000021                     _statusByte1:
   321                           	callstack 0
   322   000021                     	ds	1
   323   000022                     _statusByte0:
   324                           	callstack 0
   325   000022                     	ds	1
   326   000023                     _dispSubState:
   327                           	callstack 0
   328   000023                     	ds	1
   329   000024                     _dispMainState:
   330                           	callstack 0
   331   000024                     	ds	1
   332   000025                     _selectedIndx:
   333                           	callstack 0
   334   000025                     	ds	1
   335   000026                     _keyHold:
   336                           	callstack 0
   337   000026                     	ds	1
   338   000027                     _keyDown:
   339                           	callstack 0
   340   000027                     	ds	1
   341   000028                     _tick250mSec:
   342                           	callstack 0
   343   000028                     	ds	1
   344   000029                     _tick1000mSec:
   345                           	callstack 0
   346   000029                     	ds	1
   347   00002A                     _timer0ReloadVal:
   348                           	callstack 0
   349   00002A                     	ds	1
   350   00002B                     _ucDispBuffer2:
   351                           	callstack 0
   352   00002B                     	ds	4
   353   00002F                     _ucDispBuffer1:
   354                           	callstack 0
   355   00002F                     	ds	4
   356   000033                     _SetPoint:
   357                           	callstack 0
   358   000033                     	ds	1
   359                           
   360                           	psect	dataCOMRAM
   361   00004D                     __pdataCOMRAM:
   362                           	callstack 0
   363   00004D                     _pucReadDispBuffer:
   364                           	callstack 0
   365   00004D                     	ds	2
   366   00004F                     _outputCounter:
   367                           	callstack 0
   368   00004F                     	ds	2
   369   000051                     _ucPassword:
   370                           	callstack 0
   371   000051                     	ds	1
   372   000052                     _sec60Counter:
   373                           	callstack 0
   374   000052                     	ds	1
   375                           
   376                           	psect	cstackCOMRAM
   377   000034                     __pcstackCOMRAM:
   378                           	callstack 0
   379   000034                     ?i2___lwmod:
   380                           	callstack 0
   381   000034                     plusOneWithModulo@modulo_val:
   382                           	callstack 0
   383   000034                     i2___lwmod@dividend:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x0
   387   000034                     	ds	1
   388   000035                     ??_plusOneWithModulo:
   389                           
   390                           ; 1 bytes @ 0x1
   391   000035                     	ds	1
   392   000036                     i2___lwmod@divisor:
   393                           	callstack 0
   394                           
   395                           ; 2 bytes @ 0x2
   396   000036                     	ds	2
   397   000038                     i2___lwmod@counter:
   398                           	callstack 0
   399                           
   400                           ; 1 bytes @ 0x4
   401   000038                     	ds	2
   402   00003A                     plusOneWithModulo@val:
   403                           	callstack 0
   404                           
   405                           ; 1 bytes @ 0x6
   406   00003A                     	ds	1
   407   00003B                     ??_displayISR:
   408                           
   409                           ; 1 bytes @ 0x7
   410   00003B                     	ds	2
   411   00003D                     ??_INTERRUPT_InterruptManagerLow:
   412                           
   413                           ; 1 bytes @ 0x9
   414   00003D                     	ds	2
   415   00003F                     ?___lwdiv:
   416                           	callstack 0
   417   00003F                     ?___lwmod:
   418                           	callstack 0
   419   00003F                     clear@i:
   420                           	callstack 0
   421   00003F                     directOrWithDisplay@digitNo:
   422                           	callstack 0
   423   00003F                     directAssign@digitNo:
   424                           	callstack 0
   425   00003F                     digitAssign@digitNo:
   426                           	callstack 0
   427   00003F                     DATAEE_WriteByte@bData:
   428                           	callstack 0
   429   00003F                     DATAEE_ReadByte@bAdd:
   430                           	callstack 0
   431   00003F                     checkAndInrDcrChar@value:
   432                           	callstack 0
   433   00003F                     ___lwdiv@dividend:
   434                           	callstack 0
   435   00003F                     ___lwmod@dividend:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0xB
   439   00003F                     	ds	1
   440   000040                     directOrWithDisplay@segmentValue:
   441                           	callstack 0
   442   000040                     directAssign@segmentValue:
   443                           	callstack 0
   444   000040                     digitAssign@segmentValue:
   445                           	callstack 0
   446   000040                     DATAEE_WriteByte@bAdd:
   447                           	callstack 0
   448   000040                     readByte@buffer:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0xC
   452   000040                     	ds	1
   453   000041                     checkAndInrDcrChar@upperLimit:
   454                           	callstack 0
   455   000041                     DATAEE_WriteByte@GIEBitValue:
   456                           	callstack 0
   457   000041                     ___lwdiv@divisor:
   458                           	callstack 0
   459   000041                     ___lwmod@divisor:
   460                           	callstack 0
   461                           
   462                           ; 2 bytes @ 0xD
   463   000041                     	ds	1
   464   000042                     checkAndInrDcrChar@lowerLimit:
   465                           	callstack 0
   466   000042                     readByte@addr:
   467                           	callstack 0
   468   000042                     writeByte@buffer:
   469                           	callstack 0
   470                           
   471                           ; 2 bytes @ 0xE
   472   000042                     	ds	1
   473   000043                     readByte@nBytes:
   474                           	callstack 0
   475   000043                     ___lwmod@counter:
   476                           	callstack 0
   477   000043                     ___lwdiv@quotient:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0xF
   481   000043                     	ds	1
   482   000044                     ??_readByte:
   483   000044                     writeByte@addr:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x10
   487   000044                     	ds	1
   488   000045                     writeByte@nBytes:
   489                           	callstack 0
   490   000045                     ___lwdiv@counter:
   491                           	callstack 0
   492                           
   493                           ; 1 bytes @ 0x11
   494   000045                     	ds	1
   495   000046                     ??_writeByte:
   496   000046                     displayInt@hexData:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x12
   500   000046                     	ds	1
   501   000047                     readByte@i:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x13
   505   000047                     	ds	1
   506   000048                     displayInt@dotPosition:
   507                           	callstack 0
   508                           
   509                           ; 1 bytes @ 0x14
   510   000048                     	ds	1
   511   000049                     displayInt@temp:
   512                           	callstack 0
   513   000049                     writeByte@i:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x15
   517   000049                     	ds	1
   518   00004A                     displayInt@i:
   519                           	callstack 0
   520                           
   521                           ; 1 bytes @ 0x16
   522   00004A                     	ds	1
   523   00004B                     ??_main:
   524                           
   525                           ; 1 bytes @ 0x17
   526   00004B                     	ds	2
   527                           
   528 ;;
   529 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   530 ;;
   531 ;; *************** function _main *****************
   532 ;; Defined at:
   533 ;;		line 151 in file "main.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;		None
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      void 
   540 ;; Registers used:
   541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   547 ;;      Params:         0       0       0       0       0       0       0
   548 ;;      Locals:         0       0       0       0       0       0       0
   549 ;;      Temps:          2       0       0       0       0       0       0
   550 ;;      Totals:         2       0       0       0       0       0       0
   551 ;;Total ram usage:        2 bytes
   552 ;; Hardware stack levels required when called: 6
   553 ;; This function calls:
   554 ;;		_SYSTEM_Initialize
   555 ;;		_checkAndInrDcrChar
   556 ;;		_digitAssign
   557 ;;		_directAssign
   558 ;;		_display
   559 ;;		_displayInt
   560 ;;		_initVariables
   561 ;;		_writeByte
   562 ;; This function is called by:
   563 ;;		Startup code after reset
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           	psect	text0
   568   00062A                     __ptext0:
   569                           	callstack 0
   570   00062A                     _main:
   571                           	callstack 25
   572   00062A                     
   573                           ;main.c: 152:     SYSTEM_Initialize();
   574   00062A  EC58  F008         	call	_SYSTEM_Initialize	;wreg free
   575   00062E                     
   576                           ;main.c: 153:     TRISCbits.TRISC5 = 0;
   577   00062E  9A94               	bcf	148,5,c	;volatile
   578   000630                     
   579                           ;main.c: 154:     TRISCbits.TRISC6 = 0;
   580   000630  9C94               	bcf	148,6,c	;volatile
   581   000632                     
   582                           ;main.c: 155:     TRISCbits.TRISC7 = 0;
   583   000632  9E94               	bcf	148,7,c	;volatile
   584   000634                     
   585                           ;main.c: 156:     TRISBbits.TRISB3 = 0;
   586   000634  9693               	bcf	147,3,c	;volatile
   587   000636                     
   588                           ;main.c: 157:     LATBbits.LATB3 = 0;
   589   000636  968A               	bcf	138,3,c	;volatile
   590   000638                     
   591                           ;main.c: 158:     (INTCONbits.GIE = 1);
   592   000638  8EF2               	bsf	242,7,c	;volatile
   593   00063A                     
   594                           ;main.c: 159:     initVariables();
   595   00063A  ECB3  F007         	call	_initVariables	;wreg free
   596   00063E                     l2451:
   597                           
   598                           ;main.c: 161:         statusByte0 = 0x00;
   599   00063E  0E00               	movlw	0
   600   000640  6E22               	movwf	_statusByte0^0,c
   601   000642                     
   602                           ;main.c: 162:         statusByte1 = 0x00;
   603   000642  0E00               	movlw	0
   604   000644  6E21               	movwf	_statusByte1^0,c
   605   000646                     
   606                           ;main.c: 163:         if (tick1000mSec) {
   607   000646  5029               	movf	_tick1000mSec^0,w,c
   608   000648  B4D8               	btfsc	status,2,c
   609   00064A  EF29  F003         	goto	u1721
   610   00064E  EF2B  F003         	goto	u1720
   611   000652                     u1721:
   612   000652  EF73  F003         	goto	l2477
   613   000656                     u1720:
   614   000656                     
   615                           ;main.c: 164:             tick1000mSec = 0;
   616   000656  0E00               	movlw	0
   617   000658  6E29               	movwf	_tick1000mSec^0,c
   618                           
   619                           ;main.c: 165:             if (sec60Counter == 0) {
   620   00065A  5052               	movf	_sec60Counter^0,w,c
   621   00065C  A4D8               	btfss	status,2,c
   622   00065E  EF33  F003         	goto	u1731
   623   000662  EF35  F003         	goto	u1730
   624   000666                     u1731:
   625   000666  EF72  F003         	goto	l2475
   626   00066A                     u1730:
   627   00066A                     
   628                           ;main.c: 166:                 sec60Counter = 60;
   629   00066A  0E3C               	movlw	60
   630   00066C  6E52               	movwf	_sec60Counter^0,c
   631   00066E                     
   632                           ;main.c: 167:                 fps = fpsCounter;
   633   00066E  C00F  F00D         	movff	_fpsCounter,_fps
   634   000672  C010  F00E         	movff	_fpsCounter+1,_fps+1
   635                           
   636                           ;main.c: 168:                 fpsCounter = 0;
   637   000676  0E00               	movlw	0
   638   000678  6E10               	movwf	(_fpsCounter+1)^0,c
   639   00067A  0E00               	movlw	0
   640   00067C  6E0F               	movwf	_fpsCounter^0,c
   641   00067E                     
   642                           ;main.c: 169:                 if (fps < (SetPoint.ucLowSetPoint)) {
   643   00067E  5033               	movf	_SetPoint^0,w,c
   644   000680  5C0D               	subwf	_fps^0,w,c
   645   000682  0E00               	movlw	0
   646   000684  580E               	subwfb	(_fps+1)^0,w,c
   647   000686  B0D8               	btfsc	status,0,c
   648   000688  EF48  F003         	goto	u1741
   649   00068C  EF4A  F003         	goto	u1740
   650   000690                     u1741:
   651   000690  EF5E  F003         	goto	l2471
   652   000694                     u1740:
   653   000694                     
   654                           ;main.c: 170:                     if (outputCounter == 0) {
   655   000694  504F               	movf	_outputCounter^0,w,c
   656   000696  1050               	iorwf	(_outputCounter+1)^0,w,c
   657   000698  A4D8               	btfss	status,2,c
   658   00069A  EF51  F003         	goto	u1751
   659   00069E  EF53  F003         	goto	u1750
   660   0006A2                     u1751:
   661   0006A2  EF59  F003         	goto	l2469
   662   0006A6                     u1750:
   663   0006A6                     
   664                           ;main.c: 171:                         outputCounter = 2;
   665   0006A6  0E00               	movlw	0
   666   0006A8  6E50               	movwf	(_outputCounter+1)^0,c
   667   0006AA  0E02               	movlw	2
   668   0006AC  6E4F               	movwf	_outputCounter^0,c
   669                           
   670                           ;main.c: 172:                         outputLatch = 1;
   671   0006AE  0E01               	movlw	1
   672   0006B0  6E1E               	movwf	_outputLatch^0,c
   673   0006B2                     l2469:
   674                           
   675                           ;main.c: 174:                     outputCounter--;
   676   0006B2  064F               	decf	_outputCounter^0,f,c
   677   0006B4  A0D8               	btfss	status,0,c
   678   0006B6  0650               	decf	(_outputCounter+1)^0,f,c
   679                           
   680                           ;main.c: 175:                 } else if (fps > (SetPoint.ucLowSetPoint)) {
   681   0006B8  EF72  F003         	goto	l2475
   682   0006BC                     l2471:
   683   0006BC  5033               	movf	_SetPoint^0,w,c
   684   0006BE  6E4B               	movwf	??_main^0,c
   685   0006C0  6A4C               	clrf	(??_main+1)^0,c
   686   0006C2  500D               	movf	_fps^0,w,c
   687   0006C4  5C4B               	subwf	??_main^0,w,c
   688   0006C6  500E               	movf	(_fps+1)^0,w,c
   689   0006C8  584C               	subwfb	(??_main+1)^0,w,c
   690   0006CA  B0D8               	btfsc	status,0,c
   691   0006CC  EF6A  F003         	goto	u1761
   692   0006D0  EF6C  F003         	goto	u1760
   693   0006D4                     u1761:
   694   0006D4  EF72  F003         	goto	l2475
   695   0006D8                     u1760:
   696   0006D8                     
   697                           ;main.c: 176:                     outputCounter = 2;
   698   0006D8  0E00               	movlw	0
   699   0006DA  6E50               	movwf	(_outputCounter+1)^0,c
   700   0006DC  0E02               	movlw	2
   701   0006DE  6E4F               	movwf	_outputCounter^0,c
   702                           
   703                           ;main.c: 177:                     outputLatch = 0;
   704   0006E0  0E00               	movlw	0
   705   0006E2  6E1E               	movwf	_outputLatch^0,c
   706   0006E4                     l2475:
   707                           
   708                           ;main.c: 181:             sec60Counter--;
   709   0006E4  0652               	decf	_sec60Counter^0,f,c
   710   0006E6                     l2477:
   711                           
   712                           ;main.c: 183:         if (tick250mSec) {
   713   0006E6  5028               	movf	_tick250mSec^0,w,c
   714   0006E8  B4D8               	btfsc	status,2,c
   715   0006EA  EF79  F003         	goto	u1771
   716   0006EE  EF7B  F003         	goto	u1770
   717   0006F2                     u1771:
   718   0006F2  EF8B  F003         	goto	l116
   719   0006F6                     u1770:
   720   0006F6                     
   721                           ;main.c: 184:             tick250mSec = 0;
   722   0006F6  0E00               	movlw	0
   723   0006F8  6E28               	movwf	_tick250mSec^0,c
   724                           
   725                           ;main.c: 185:             interruptFlagDisp = 0;
   726   0006FA  0E00               	movlw	0
   727   0006FC  6E1F               	movwf	_interruptFlagDisp^0,c
   728                           
   729                           ;main.c: 186:             if (interruptFlag) {
   730   0006FE  5020               	movf	_interruptFlag^0,w,c
   731   000700  B4D8               	btfsc	status,2,c
   732   000702  EF85  F003         	goto	u1781
   733   000706  EF87  F003         	goto	u1780
   734   00070A                     u1781:
   735   00070A  EF8B  F003         	goto	l116
   736   00070E                     u1780:
   737   00070E                     
   738                           ;main.c: 187:                 interruptFlag = 0;
   739   00070E  0E00               	movlw	0
   740   000710  6E20               	movwf	_interruptFlag^0,c
   741                           
   742                           ;main.c: 188:                 interruptFlagDisp = 1;
   743   000712  0E01               	movlw	1
   744   000714  6E1F               	movwf	_interruptFlagDisp^0,c
   745   000716                     l116:
   746                           
   747                           ;main.c: 192:         if (interruptFlagDisp) {
   748   000716  501F               	movf	_interruptFlagDisp^0,w,c
   749   000718  B4D8               	btfsc	status,2,c
   750   00071A  EF91  F003         	goto	u1791
   751   00071E  EF93  F003         	goto	u1790
   752   000722                     u1791:
   753   000722  EF94  F003         	goto	l2485
   754   000726                     u1790:
   755   000726                     
   756                           ;main.c: 193:             statusByte1 |= 0x01;
   757   000726  8021               	bsf	_statusByte1^0,0,c
   758   000728                     l2485:
   759                           
   760                           ;main.c: 195:         if (outputLatch) {
   761   000728  501E               	movf	_outputLatch^0,w,c
   762   00072A  B4D8               	btfsc	status,2,c
   763   00072C  EF9A  F003         	goto	u1801
   764   000730  EF9C  F003         	goto	u1800
   765   000734                     u1801:
   766   000734  EFA0  F003         	goto	l119
   767   000738                     u1800:
   768   000738                     
   769                           ;main.c: 196:             LATBbits.LATB3 = 1;
   770   000738  868A               	bsf	138,3,c	;volatile
   771   00073A                     
   772                           ;main.c: 197:             statusByte1 |= 0x02;
   773   00073A  8221               	bsf	_statusByte1^0,1,c
   774                           
   775                           ;main.c: 198:         } else {
   776   00073C  EF2F  F004         	goto	l2543
   777   000740                     l119:
   778                           
   779                           ;main.c: 199:             LATBbits.LATB3 = 0;
   780   000740  968A               	bcf	138,3,c	;volatile
   781   000742  EF2F  F004         	goto	l2543
   782   000746                     l2491:
   783                           
   784                           ;main.c: 208:                 displayInt(fps, 0);
   785   000746  C00D  F046         	movff	_fps,displayInt@hexData
   786   00074A  C00E  F047         	movff	_fps+1,displayInt@hexData+1
   787   00074E  0E00               	movlw	0
   788   000750  6E48               	movwf	displayInt@dotPosition^0,c
   789   000752  EC7B  F005         	call	_displayInt	;wreg free
   790   000756                     
   791                           ;main.c: 209:                 if (keyDown & 0x01) {
   792   000756  A027               	btfss	_keyDown^0,0,c
   793   000758  EFB0  F003         	goto	u1811
   794   00075C  EFB2  F003         	goto	u1810
   795   000760                     u1811:
   796   000760  EFBC  F003         	goto	l2497
   797   000764                     u1810:
   798   000764                     
   799                           ;main.c: 210:                     outputCounter = 2;
   800   000764  0E00               	movlw	0
   801   000766  6E50               	movwf	(_outputCounter+1)^0,c
   802   000768  0E02               	movlw	2
   803   00076A  6E4F               	movwf	_outputCounter^0,c
   804                           
   805                           ;main.c: 211:                     outputLatch = 0;
   806   00076C  0E00               	movlw	0
   807   00076E  6E1E               	movwf	_outputLatch^0,c
   808                           
   809                           ;main.c: 212:                     keyDown = 0x00;
   810   000770  0E00               	movlw	0
   811   000772  6E27               	movwf	_keyDown^0,c
   812                           
   813                           ;main.c: 213:                     keyHold = 0x00;
   814   000774  0E00               	movlw	0
   815   000776  6E26               	movwf	_keyHold^0,c
   816   000778                     l2497:
   817                           
   818                           ;main.c: 215:                 if (keyDown & 0x08) {
   819   000778  A627               	btfss	_keyDown^0,3,c
   820   00077A  EFC1  F003         	goto	u1821
   821   00077E  EFC3  F003         	goto	u1820
   822   000782                     u1821:
   823   000782  EF48  F004         	goto	l125
   824   000786                     u1820:
   825   000786                     
   826                           ;main.c: 216:                     keyDown = 0x00;
   827   000786  0E00               	movlw	0
   828   000788  6E27               	movwf	_keyDown^0,c
   829                           
   830                           ;main.c: 217:                     keyHold = 0x00;
   831   00078A  0E00               	movlw	0
   832   00078C  6E26               	movwf	_keyHold^0,c
   833   00078E                     
   834                           ;main.c: 218:                     dispMainState++;
   835   00078E  2A24               	incf	_dispMainState^0,f,c
   836   000790  EF48  F004         	goto	l125
   837   000794                     l2503:
   838                           
   839                           ;main.c: 222:                 statusByte0 |= 0x01;
   840   000794  8022               	bsf	_statusByte0^0,0,c
   841   000796                     
   842                           ;main.c: 223:                 digitAssign(25, 2);
   843   000796  0E02               	movlw	2
   844   000798  6E3F               	movwf	digitAssign@digitNo^0,c
   845   00079A  0E19               	movlw	25
   846   00079C  ECD0  F007         	call	_digitAssign
   847   0007A0                     
   848                           ;main.c: 224:                 digitAssign(27, 1);
   849   0007A0  0E01               	movlw	1
   850   0007A2  6E3F               	movwf	digitAssign@digitNo^0,c
   851   0007A4  0E1B               	movlw	27
   852   0007A6  ECD0  F007         	call	_digitAssign
   853   0007AA                     
   854                           ;main.c: 225:                 digitAssign(24, 0);
   855   0007AA  0E00               	movlw	0
   856   0007AC  6E3F               	movwf	digitAssign@digitNo^0,c
   857   0007AE  0E18               	movlw	24
   858   0007B0  ECD0  F007         	call	_digitAssign
   859   0007B4                     
   860                           ;main.c: 226:                 if (keyDown & 0x08) {
   861   0007B4  A627               	btfss	_keyDown^0,3,c
   862   0007B6  EFDF  F003         	goto	u1831
   863   0007BA  EFE1  F003         	goto	u1830
   864   0007BE                     u1831:
   865   0007BE  EFE7  F003         	goto	l2515
   866   0007C2                     u1830:
   867   0007C2                     
   868                           ;main.c: 227:                     keyDown = 0x00;
   869   0007C2  0E00               	movlw	0
   870   0007C4  6E27               	movwf	_keyDown^0,c
   871                           
   872                           ;main.c: 228:                     keyHold = 0x00;
   873   0007C6  0E00               	movlw	0
   874   0007C8  6E26               	movwf	_keyHold^0,c
   875                           
   876                           ;main.c: 229:                     dispMainState = 0;
   877   0007CA  0E00               	movlw	0
   878   0007CC  6E24               	movwf	_dispMainState^0,c
   879   0007CE                     l2515:
   880                           
   881                           ;main.c: 231:                 if (keyDown & 0x04) {
   882   0007CE  A427               	btfss	_keyDown^0,2,c
   883   0007D0  EFEC  F003         	goto	u1841
   884   0007D4  EFEE  F003         	goto	u1840
   885   0007D8                     u1841:
   886   0007D8  EF48  F004         	goto	l125
   887   0007DC                     u1840:
   888   0007DC                     
   889                           ;main.c: 232:                     keyDown = 0x00;
   890   0007DC  0E00               	movlw	0
   891   0007DE  6E27               	movwf	_keyDown^0,c
   892                           
   893                           ;main.c: 233:                     keyHold = 0x00;
   894   0007E0  0E00               	movlw	0
   895   0007E2  6E26               	movwf	_keyHold^0,c
   896   0007E4                     
   897                           ;main.c: 234:                     dispMainState++;
   898   0007E4  2A24               	incf	_dispMainState^0,f,c
   899   0007E6                     
   900                           ;main.c: 235:                     dispSubState = 0;
   901   0007E6  0E00               	movlw	0
   902   0007E8  6E23               	movwf	_dispSubState^0,c
   903   0007EA                     
   904                           ;main.c: 236:                     selectedIndx = 0;
   905   0007EA  0E00               	movlw	0
   906   0007EC  6E25               	movwf	_selectedIndx^0,c
   907   0007EE  EF48  F004         	goto	l125
   908   0007F2                     l2525:
   909                           
   910                           ;main.c: 240:                 statusByte0 |= 0x01;
   911   0007F2  8022               	bsf	_statusByte0^0,0,c
   912   0007F4                     
   913                           ;main.c: 241:                 checkAndInrDcrChar(&SetPoint.ucLowSetPoint, 60, 0);
   914   0007F4  0E33               	movlw	low _SetPoint
   915   0007F6  6E3F               	movwf	checkAndInrDcrChar@value^0,c
   916   0007F8  0E00               	movlw	high _SetPoint
   917   0007FA  6E40               	movwf	(checkAndInrDcrChar@value+1)^0,c
   918   0007FC  0E3C               	movlw	60
   919   0007FE  6E41               	movwf	checkAndInrDcrChar@upperLimit^0,c
   920   000800  0E00               	movlw	0
   921   000802  6E42               	movwf	checkAndInrDcrChar@lowerLimit^0,c
   922   000804  ECDE  F005         	call	_checkAndInrDcrChar	;wreg free
   923   000808                     
   924                           ;main.c: 242:                 displayInt(SetPoint.ucLowSetPoint, 0);
   925   000808  C033  F046         	movff	_SetPoint,displayInt@hexData
   926   00080C  6A47               	clrf	(displayInt@hexData+1)^0,c
   927   00080E  0E00               	movlw	0
   928   000810  6E48               	movwf	displayInt@dotPosition^0,c
   929   000812  EC7B  F005         	call	_displayInt	;wreg free
   930   000816                     
   931                           ;main.c: 243:                 if ((keyDown & 0x08) || (keyDown & 0x04)) {
   932   000816  B627               	btfsc	_keyDown^0,3,c
   933   000818  EF10  F004         	goto	u1851
   934   00081C  EF12  F004         	goto	u1850
   935   000820                     u1851:
   936   000820  EF19  F004         	goto	l2535
   937   000824                     u1850:
   938   000824  A427               	btfss	_keyDown^0,2,c
   939   000826  EF17  F004         	goto	u1861
   940   00082A  EF19  F004         	goto	u1860
   941   00082E                     u1861:
   942   00082E  EF48  F004         	goto	l125
   943   000832                     u1860:
   944   000832                     l2535:
   945                           
   946                           ;main.c: 244:                     keyDown = 0x00;
   947   000832  0E00               	movlw	0
   948   000834  6E27               	movwf	_keyDown^0,c
   949                           
   950                           ;main.c: 245:                     keyHold = 0x00;
   951   000836  0E00               	movlw	0
   952   000838  6E26               	movwf	_keyHold^0,c
   953                           
   954                           ;main.c: 246:                     dispMainState = 0;
   955   00083A  0E00               	movlw	0
   956   00083C  6E24               	movwf	_dispMainState^0,c
   957   00083E                     
   958                           ;main.c: 247:                     writeByte((unsigned char *) &SetPoint, 0, sizeof (SetP
      +                          oint));
   959   00083E  0E33               	movlw	low _SetPoint
   960   000840  6E42               	movwf	writeByte@buffer^0,c
   961   000842  0E00               	movlw	high _SetPoint
   962   000844  6E43               	movwf	(writeByte@buffer+1)^0,c
   963   000846  0E00               	movlw	0
   964   000848  6E44               	movwf	writeByte@addr^0,c
   965   00084A  0E01               	movlw	1
   966   00084C  6E45               	movwf	writeByte@nBytes^0,c
   967   00084E  EC0A  F007         	call	_writeByte	;wreg free
   968   000852  EF48  F004         	goto	l125
   969   000856                     l2539:
   970                           
   971                           ;main.c: 251:                 dispMainState = 0;
   972   000856  0E00               	movlw	0
   973   000858  6E24               	movwf	_dispMainState^0,c
   974                           
   975                           ;main.c: 252:                 break;
   976   00085A  EF48  F004         	goto	l125
   977   00085E                     l2543:
   978   00085E  5024               	movf	_dispMainState^0,w,c
   979   000860  6E4B               	movwf	??_main^0,c
   980   000862  6A4C               	clrf	(??_main+1)^0,c
   981                           
   982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   983                           ; Switch size 1, requested type "simple"
   984                           ; Number of cases is 1, Range of values is 0 to 0
   985                           ; switch strategies available:
   986                           ; Name         Instructions Cycles
   987                           ; simple_byte            4     3 (average)
   988                           ;	Chosen strategy is simple_byte
   989   000864  504C               	movf	(??_main+1)^0,w,c
   990   000866  0A00               	xorlw	0	; case 0
   991   000868  B4D8               	btfsc	status,2,c
   992   00086A  EF39  F004         	goto	l2709
   993   00086E  EF2B  F004         	goto	l2539
   994   000872                     l2709:
   995                           
   996                           ; Switch size 1, requested type "simple"
   997                           ; Number of cases is 3, Range of values is 0 to 2
   998                           ; switch strategies available:
   999                           ; Name         Instructions Cycles
  1000                           ; simple_byte           10     6 (average)
  1001                           ;	Chosen strategy is simple_byte
  1002   000872  504B               	movf	??_main^0,w,c
  1003   000874  0A00               	xorlw	0	; case 0
  1004   000876  B4D8               	btfsc	status,2,c
  1005   000878  EFA3  F003         	goto	l2491
  1006   00087C  0A01               	xorlw	1	; case 1
  1007   00087E  B4D8               	btfsc	status,2,c
  1008   000880  EFCA  F003         	goto	l2503
  1009   000884  0A03               	xorlw	3	; case 2
  1010   000886  B4D8               	btfsc	status,2,c
  1011   000888  EFF9  F003         	goto	l2525
  1012   00088C  EF2B  F004         	goto	l2539
  1013   000890                     l125:
  1014                           
  1015                           ;main.c: 254:         if (statusByte0 & 0x01) {
  1016   000890  A022               	btfss	_statusByte0^0,0,c
  1017   000892  EF4D  F004         	goto	u1871
  1018   000896  EF4F  F004         	goto	u1870
  1019   00089A                     u1871:
  1020   00089A  EF52  F004         	goto	l134
  1021   00089E                     u1870:
  1022   00089E                     
  1023                           ;main.c: 255:             LATCbits.LATC7 = 0;
  1024   00089E  9E8B               	bcf	139,7,c	;volatile
  1025                           
  1026                           ;main.c: 256:         } else {
  1027   0008A0  EF53  F004         	goto	l135
  1028   0008A4                     l134:
  1029                           
  1030                           ;main.c: 257:             LATCbits.LATC7 = 1;
  1031   0008A4  8E8B               	bsf	139,7,c	;volatile
  1032   0008A6                     l135:
  1033                           
  1034                           ;main.c: 259:         if (statusByte1 & 0x01) {
  1035   0008A6  A021               	btfss	_statusByte1^0,0,c
  1036   0008A8  EF58  F004         	goto	u1881
  1037   0008AC  EF5A  F004         	goto	u1880
  1038   0008B0                     u1881:
  1039   0008B0  EF5D  F004         	goto	l136
  1040   0008B4                     u1880:
  1041   0008B4                     
  1042                           ;main.c: 260:             LATCbits.LATC6 = 0;
  1043   0008B4  9C8B               	bcf	139,6,c	;volatile
  1044                           
  1045                           ;main.c: 261:         } else {
  1046   0008B6  EF5E  F004         	goto	l137
  1047   0008BA                     l136:
  1048                           
  1049                           ;main.c: 262:             LATCbits.LATC6 = 1;
  1050   0008BA  8C8B               	bsf	139,6,c	;volatile
  1051   0008BC                     l137:
  1052                           
  1053                           ;main.c: 264:         if (statusByte1 & 0x02) {
  1054   0008BC  A221               	btfss	_statusByte1^0,1,c
  1055   0008BE  EF63  F004         	goto	u1891
  1056   0008C2  EF65  F004         	goto	u1890
  1057   0008C6                     u1891:
  1058   0008C6  EF68  F004         	goto	l138
  1059   0008CA                     u1890:
  1060   0008CA                     
  1061                           ;main.c: 265:             LATCbits.LATC5 = 0;
  1062   0008CA  9A8B               	bcf	139,5,c	;volatile
  1063                           
  1064                           ;main.c: 266:         } else {
  1065   0008CC  EF69  F004         	goto	l2551
  1066   0008D0                     l138:
  1067                           
  1068                           ;main.c: 267:             LATCbits.LATC5 = 1;
  1069   0008D0  8A8B               	bsf	139,5,c	;volatile
  1070   0008D2                     l2551:
  1071                           
  1072                           ;main.c: 269:         directAssign(statusByte0, 3);
  1073   0008D2  0E03               	movlw	3
  1074   0008D4  6E3F               	movwf	directAssign@digitNo^0,c
  1075   0008D6  5022               	movf	_statusByte0^0,w,c
  1076   0008D8  EC24  F008         	call	_directAssign
  1077   0008DC                     
  1078                           ;main.c: 270:         display();
  1079   0008DC  EC43  F008         	call	_display	;wreg free
  1080   0008E0  0004               	clrwdt		;# 
  1081   0008E2  EF1F  F003         	goto	l2451
  1082   0008E6  EF07  F000         	goto	start
  1083   0008EA                     __end_of_main:
  1084                           	callstack 0
  1085                           
  1086 ;; *************** function _writeByte *****************
  1087 ;; Defined at:
  1088 ;;		line 12 in file "eeprom_wrapper.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  buffer          2   14[COMRAM] PTR unsigned char 
  1091 ;;		 -> SetPoint(1), 
  1092 ;;  addr            1   16[COMRAM] unsigned char 
  1093 ;;  nBytes          1   17[COMRAM] unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  i               2   21[COMRAM] int 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1105 ;;      Params:         4       0       0       0       0       0       0
  1106 ;;      Locals:         2       0       0       0       0       0       0
  1107 ;;      Temps:          3       0       0       0       0       0       0
  1108 ;;      Totals:         9       0       0       0       0       0       0
  1109 ;;Total ram usage:        9 bytes
  1110 ;; Hardware stack levels used: 1
  1111 ;; Hardware stack levels required when called: 4
  1112 ;; This function calls:
  1113 ;;		_DATAEE_WriteByte
  1114 ;; This function is called by:
  1115 ;;		_main
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text1
  1120   000E14                     __ptext1:
  1121                           	callstack 0
  1122   000E14                     _writeByte:
  1123                           	callstack 26
  1124   000E14                     
  1125                           ;eeprom_wrapper.c: 13:     int i;;eeprom_wrapper.c: 14:     for (i = 0; i < nBytes; i++)
      +                           {
  1126   000E14  0E00               	movlw	0
  1127   000E16  6E4A               	movwf	(writeByte@i+1)^0,c
  1128   000E18  0E00               	movlw	0
  1129   000E1A  6E49               	movwf	writeByte@i^0,c
  1130   000E1C  EF1E  F007         	goto	l2407
  1131   000E20                     l2399:
  1132                           
  1133                           ;eeprom_wrapper.c: 15:         DATAEE_WriteByte(addr++, *(buffer++));
  1134   000E20  C042  FFD9         	movff	writeByte@buffer,fsr2l
  1135   000E24  C043  FFDA         	movff	writeByte@buffer+1,fsr2h
  1136   000E28  50DF               	movf	indf2,w,c
  1137   000E2A  6E3F               	movwf	DATAEE_WriteByte@bData^0,c
  1138   000E2C  5044               	movf	writeByte@addr^0,w,c
  1139   000E2E  EC57  F007         	call	_DATAEE_WriteByte
  1140   000E32  4A42               	infsnz	writeByte@buffer^0,f,c
  1141   000E34  2A43               	incf	(writeByte@buffer+1)^0,f,c
  1142   000E36  2A44               	incf	writeByte@addr^0,f,c
  1143   000E38                     
  1144                           ;eeprom_wrapper.c: 16:     }
  1145   000E38  4A49               	infsnz	writeByte@i^0,f,c
  1146   000E3A  2A4A               	incf	(writeByte@i+1)^0,f,c
  1147   000E3C                     l2407:
  1148   000E3C  5045               	movf	writeByte@nBytes^0,w,c
  1149   000E3E  6E46               	movwf	??_writeByte^0,c
  1150   000E40  6A47               	clrf	(??_writeByte+1)^0,c
  1151   000E42  5046               	movf	??_writeByte^0,w,c
  1152   000E44  5C49               	subwf	writeByte@i^0,w,c
  1153   000E46  504A               	movf	(writeByte@i+1)^0,w,c
  1154   000E48  0A80               	xorlw	128
  1155   000E4A  6E48               	movwf	(??_writeByte+2)^0,c
  1156   000E4C  5047               	movf	(??_writeByte+1)^0,w,c
  1157   000E4E  0A80               	xorlw	128
  1158   000E50  5848               	subwfb	(??_writeByte+2)^0,w,c
  1159   000E52  A0D8               	btfss	status,0,c
  1160   000E54  EF2E  F007         	goto	u1651
  1161   000E58  EF30  F007         	goto	u1650
  1162   000E5C                     u1651:
  1163   000E5C  EF10  F007         	goto	l2399
  1164   000E60                     u1650:
  1165   000E60  0012               	return		;funcret
  1166   000E62                     __end_of_writeByte:
  1167                           	callstack 0
  1168                           
  1169 ;; *************** function _DATAEE_WriteByte *****************
  1170 ;; Defined at:
  1171 ;;		line 173 in file "memory.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;  bAdd            1    wreg     unsigned char 
  1174 ;;  bData           1   11[COMRAM] unsigned char 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  bAdd            1   12[COMRAM] unsigned char 
  1177 ;;  GIEBitValue     1   13[COMRAM] unsigned char 
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1187 ;;      Params:         1       0       0       0       0       0       0
  1188 ;;      Locals:         2       0       0       0       0       0       0
  1189 ;;      Temps:          0       0       0       0       0       0       0
  1190 ;;      Totals:         3       0       0       0       0       0       0
  1191 ;;Total ram usage:        3 bytes
  1192 ;; Hardware stack levels used: 1
  1193 ;; Hardware stack levels required when called: 3
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_writeByte
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text2
  1202   000EAE                     __ptext2:
  1203                           	callstack 0
  1204   000EAE                     _DATAEE_WriteByte:
  1205                           	callstack 26
  1206                           
  1207                           ;incstack = 0
  1208                           ;DATAEE_WriteByte@bAdd stored from wreg
  1209   000EAE  6E40               	movwf	DATAEE_WriteByte@bAdd^0,c
  1210   000EB0                     
  1211                           ;memory.c: 173: void DATAEE_WriteByte(uint8_t bAdd, uint8_t bData);memory.c: 174: {;memo
      +                          ry.c: 175:     uint8_t GIEBitValue = INTCONbits.GIE;
  1212   000EB0  0E00               	movlw	0
  1213   000EB2  BEF2               	btfsc	242,7,c	;volatile
  1214   000EB4  0E01               	movlw	1
  1215   000EB6  6E41               	movwf	DATAEE_WriteByte@GIEBitValue^0,c
  1216   000EB8                     
  1217                           ;memory.c: 177:     EEADR = (uint8_t)(bAdd & 0xFF);
  1218   000EB8  C040  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  1219   000EBC                     
  1220                           ;memory.c: 178:     EEDATA = bData;
  1221   000EBC  C03F  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  1222   000EC0                     
  1223                           ;memory.c: 179:     EECON1bits.EEPGD = 0;
  1224   000EC0  9EA6               	bcf	166,7,c	;volsfr
  1225   000EC2                     
  1226                           ;memory.c: 180:     EECON1bits.CFGS = 0;
  1227   000EC2  9CA6               	bcf	166,6,c	;volsfr
  1228   000EC4                     
  1229                           ;memory.c: 181:     EECON1bits.WREN = 1;
  1230   000EC4  84A6               	bsf	166,2,c	;volsfr
  1231   000EC6                     
  1232                           ;memory.c: 182:     INTCONbits.GIE = 0;
  1233   000EC6  9EF2               	bcf	242,7,c	;volatile
  1234   000EC8                     
  1235                           ;memory.c: 183:     EECON2 = 0x55;
  1236   000EC8  0E55               	movlw	85
  1237   000ECA  6EA7               	movwf	167,c	;volsfr
  1238   000ECC                     
  1239                           ;memory.c: 184:     EECON2 = 0xAA;
  1240   000ECC  0EAA               	movlw	170
  1241   000ECE  6EA7               	movwf	167,c	;volsfr
  1242   000ED0                     
  1243                           ;memory.c: 185:     EECON1bits.WR = 1;
  1244   000ED0  82A6               	bsf	166,1,c	;volsfr
  1245   000ED2                     l528:
  1246                           
  1247                           ;memory.c: 187:     while (EECON1bits.WR)
  1248   000ED2  B2A6               	btfsc	166,1,c	;volsfr
  1249   000ED4  EF6E  F007         	goto	u1221
  1250   000ED8  EF70  F007         	goto	u1220
  1251   000EDC                     u1221:
  1252   000EDC  EF69  F007         	goto	l528
  1253   000EE0                     u1220:
  1254   000EE0                     
  1255                           ;memory.c: 191:     EECON1bits.WREN = 0;
  1256   000EE0  94A6               	bcf	166,2,c	;volsfr
  1257                           
  1258                           ;memory.c: 192:     INTCONbits.GIE = GIEBitValue;
  1259   000EE2  B041               	btfsc	DATAEE_WriteByte@GIEBitValue^0,0,c
  1260   000EE4  D002               	bra	u1235
  1261   000EE6  9EF2               	bcf	242,7,c	;volatile
  1262   000EE8  D001               	bra	u1236
  1263   000EEA                     u1235:
  1264   000EEA  8EF2               	bsf	242,7,c	;volatile
  1265   000EEC                     u1236:
  1266   000EEC  0012               	return		;funcret
  1267   000EEE                     __end_of_DATAEE_WriteByte:
  1268                           	callstack 0
  1269                           
  1270 ;; *************** function _initVariables *****************
  1271 ;; Defined at:
  1272 ;;		line 144 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1286 ;;      Params:         0       0       0       0       0       0       0
  1287 ;;      Locals:         0       0       0       0       0       0       0
  1288 ;;      Temps:          0       0       0       0       0       0       0
  1289 ;;      Totals:         0       0       0       0       0       0       0
  1290 ;;Total ram usage:        0 bytes
  1291 ;; Hardware stack levels used: 1
  1292 ;; Hardware stack levels required when called: 5
  1293 ;; This function calls:
  1294 ;;		_readByte
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text3
  1301   000F66                     __ptext3:
  1302                           	callstack 0
  1303   000F66                     _initVariables:
  1304                           	callstack 25
  1305   000F66                     
  1306                           ;main.c: 145:     readByte((unsigned char *) &SetPoint, 0, sizeof (SetPoint));
  1307   000F66  0E33               	movlw	low _SetPoint
  1308   000F68  6E40               	movwf	readByte@buffer^0,c
  1309   000F6A  0E00               	movlw	high _SetPoint
  1310   000F6C  6E41               	movwf	(readByte@buffer+1)^0,c
  1311   000F6E  0E00               	movlw	0
  1312   000F70  6E42               	movwf	readByte@addr^0,c
  1313   000F72  0E01               	movlw	1
  1314   000F74  6E43               	movwf	readByte@nBytes^0,c
  1315   000F76  EC31  F007         	call	_readByte	;wreg free
  1316   000F7A                     
  1317                           ;main.c: 146:     if ((SetPoint.ucLowSetPoint == 0) || (SetPoint.ucLowSetPoint > 100)) {
  1318   000F7A  5033               	movf	_SetPoint^0,w,c
  1319   000F7C  B4D8               	btfsc	status,2,c
  1320   000F7E  EFC3  F007         	goto	u1511
  1321   000F82  EFC5  F007         	goto	u1510
  1322   000F86                     u1511:
  1323   000F86  EFCD  F007         	goto	l2339
  1324   000F8A                     u1510:
  1325   000F8A  0E64               	movlw	100
  1326   000F8C  6433               	cpfsgt	_SetPoint^0,c
  1327   000F8E  EFCB  F007         	goto	u1521
  1328   000F92  EFCD  F007         	goto	u1520
  1329   000F96                     u1521:
  1330   000F96  EFCF  F007         	goto	l104
  1331   000F9A                     u1520:
  1332   000F9A                     l2339:
  1333                           
  1334                           ;main.c: 147:         SetPoint.ucLowSetPoint = 10;
  1335   000F9A  0E0A               	movlw	10
  1336   000F9C  6E33               	movwf	_SetPoint^0,c
  1337   000F9E                     l104:
  1338   000F9E  0012               	return		;funcret
  1339   000FA0                     __end_of_initVariables:
  1340                           	callstack 0
  1341                           
  1342 ;; *************** function _readByte *****************
  1343 ;; Defined at:
  1344 ;;		line 5 in file "eeprom_wrapper.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  buffer          2   12[COMRAM] PTR unsigned char 
  1347 ;;		 -> SetPoint(1), 
  1348 ;;  addr            1   14[COMRAM] unsigned char 
  1349 ;;  nBytes          1   15[COMRAM] unsigned char 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  i               2   19[COMRAM] int 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1361 ;;      Params:         4       0       0       0       0       0       0
  1362 ;;      Locals:         2       0       0       0       0       0       0
  1363 ;;      Temps:          3       0       0       0       0       0       0
  1364 ;;      Totals:         9       0       0       0       0       0       0
  1365 ;;Total ram usage:        9 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; Hardware stack levels required when called: 4
  1368 ;; This function calls:
  1369 ;;		_DATAEE_ReadByte
  1370 ;; This function is called by:
  1371 ;;		_initVariables
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text4
  1376   000E62                     __ptext4:
  1377                           	callstack 0
  1378   000E62                     _readByte:
  1379                           	callstack 25
  1380   000E62                     
  1381                           ;eeprom_wrapper.c: 6:     int i;;eeprom_wrapper.c: 7:     for (i = 0; i < nBytes; i++) {
  1382   000E62  0E00               	movlw	0
  1383   000E64  6E48               	movwf	(readByte@i+1)^0,c
  1384   000E66  0E00               	movlw	0
  1385   000E68  6E47               	movwf	readByte@i^0,c
  1386   000E6A  EF44  F007         	goto	l2143
  1387   000E6E                     l2135:
  1388                           
  1389                           ;eeprom_wrapper.c: 8:         *(buffer++) = DATAEE_ReadByte(addr++);
  1390   000E6E  5042               	movf	readByte@addr^0,w,c
  1391   000E70  EC4E  F008         	call	_DATAEE_ReadByte
  1392   000E74  C040  FFD9         	movff	readByte@buffer,fsr2l
  1393   000E78  C041  FFDA         	movff	readByte@buffer+1,fsr2h
  1394   000E7C  6EDF               	movwf	indf2,c
  1395   000E7E  2A42               	incf	readByte@addr^0,f,c
  1396   000E80  4A40               	infsnz	readByte@buffer^0,f,c
  1397   000E82  2A41               	incf	(readByte@buffer+1)^0,f,c
  1398   000E84                     
  1399                           ;eeprom_wrapper.c: 9:     }
  1400   000E84  4A47               	infsnz	readByte@i^0,f,c
  1401   000E86  2A48               	incf	(readByte@i+1)^0,f,c
  1402   000E88                     l2143:
  1403   000E88  5043               	movf	readByte@nBytes^0,w,c
  1404   000E8A  6E44               	movwf	??_readByte^0,c
  1405   000E8C  6A45               	clrf	(??_readByte+1)^0,c
  1406   000E8E  5044               	movf	??_readByte^0,w,c
  1407   000E90  5C47               	subwf	readByte@i^0,w,c
  1408   000E92  5048               	movf	(readByte@i+1)^0,w,c
  1409   000E94  0A80               	xorlw	128
  1410   000E96  6E46               	movwf	(??_readByte+2)^0,c
  1411   000E98  5045               	movf	(??_readByte+1)^0,w,c
  1412   000E9A  0A80               	xorlw	128
  1413   000E9C  5846               	subwfb	(??_readByte+2)^0,w,c
  1414   000E9E  A0D8               	btfss	status,0,c
  1415   000EA0  EF54  F007         	goto	u1171
  1416   000EA4  EF56  F007         	goto	u1170
  1417   000EA8                     u1171:
  1418   000EA8  EF37  F007         	goto	l2135
  1419   000EAC                     u1170:
  1420   000EAC  0012               	return		;funcret
  1421   000EAE                     __end_of_readByte:
  1422                           	callstack 0
  1423                           
  1424 ;; *************** function _DATAEE_ReadByte *****************
  1425 ;; Defined at:
  1426 ;;		line 195 in file "memory.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  bAdd            1    wreg     unsigned char 
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  bAdd            1   11[COMRAM] unsigned char 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      unsigned char 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1440 ;;      Params:         0       0       0       0       0       0       0
  1441 ;;      Locals:         1       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0
  1443 ;;      Totals:         1       0       0       0       0       0       0
  1444 ;;Total ram usage:        1 bytes
  1445 ;; Hardware stack levels used: 1
  1446 ;; Hardware stack levels required when called: 3
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_readByte
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text5
  1455   00109C                     __ptext5:
  1456                           	callstack 0
  1457   00109C                     _DATAEE_ReadByte:
  1458                           	callstack 25
  1459                           
  1460                           ;incstack = 0
  1461                           ;DATAEE_ReadByte@bAdd stored from wreg
  1462   00109C  6E3F               	movwf	DATAEE_ReadByte@bAdd^0,c
  1463   00109E                     
  1464                           ;memory.c: 195: uint8_t DATAEE_ReadByte(uint8_t bAdd);memory.c: 196: {;memory.c: 197:   
      +                            EEADR = (uint8_t)(bAdd & 0xFF);
  1465   00109E  C03F  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  1466   0010A2                     
  1467                           ;memory.c: 198:     EECON1bits.CFGS = 0;
  1468   0010A2  9CA6               	bcf	166,6,c	;volsfr
  1469   0010A4                     
  1470                           ;memory.c: 199:     EECON1bits.EEPGD = 0;
  1471   0010A4  9EA6               	bcf	166,7,c	;volsfr
  1472   0010A6                     
  1473                           ;memory.c: 200:     EECON1bits.RD = 1;
  1474   0010A6  80A6               	bsf	166,0,c	;volsfr
  1475   0010A8                     
  1476                           ;memory.c: 201:     __nop();
  1477   0010A8  F000               	nop	
  1478   0010AA                     
  1479                           ;memory.c: 202:     __nop();
  1480   0010AA  F000               	nop	
  1481   0010AC                     
  1482                           ;memory.c: 204:     return (EEDATA);
  1483   0010AC  50A8               	movf	168,w,c	;volatile
  1484   0010AE  0012               	return		;funcret
  1485   0010B0                     __end_of_DATAEE_ReadByte:
  1486                           	callstack 0
  1487                           
  1488 ;; *************** function _displayInt *****************
  1489 ;; Defined at:
  1490 ;;		line 289 in file "displayKeyTickCPU.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  hexData         2   18[COMRAM] unsigned int 
  1493 ;;  dotPosition     1   20[COMRAM] unsigned char 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  i               1   22[COMRAM] unsigned char 
  1496 ;;  temp            1   21[COMRAM] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1506 ;;      Params:         3       0       0       0       0       0       0
  1507 ;;      Locals:         2       0       0       0       0       0       0
  1508 ;;      Temps:          0       0       0       0       0       0       0
  1509 ;;      Totals:         5       0       0       0       0       0       0
  1510 ;;Total ram usage:        5 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; Hardware stack levels required when called: 4
  1513 ;; This function calls:
  1514 ;;		___lwdiv
  1515 ;;		___lwmod
  1516 ;;		_clear
  1517 ;;		_digitAssign
  1518 ;;		_directOrWithDisplay
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text6
  1525   000AF6                     __ptext6:
  1526                           	callstack 0
  1527   000AF6                     _displayInt:
  1528                           	callstack 26
  1529   000AF6                     
  1530                           ;displayKeyTickCPU.c: 290:     unsigned char temp;;displayKeyTickCPU.c: 291:     unsigne
      +                          d char i = 0;
  1531   000AF6  0E00               	movlw	0
  1532   000AF8  6E4A               	movwf	displayInt@i^0,c
  1533   000AFA                     
  1534                           ;displayKeyTickCPU.c: 292:     clear();
  1535   000AFA  ECFF  F007         	call	_clear	;wreg free
  1536   000AFE                     l2345:
  1537                           
  1538                           ;displayKeyTickCPU.c: 295:         if (i >= 4)
  1539   000AFE  0E03               	movlw	3
  1540   000B00  644A               	cpfsgt	displayInt@i^0,c
  1541   000B02  EF85  F005         	goto	u1531
  1542   000B06  EF87  F005         	goto	u1530
  1543   000B0A                     u1531:
  1544   000B0A  EF89  F005         	goto	l2349
  1545   000B0E                     u1530:
  1546   000B0E  EFD0  F005         	goto	l2367
  1547   000B12                     l2349:
  1548                           
  1549                           ;displayKeyTickCPU.c: 297:         temp = (unsigned char) ((unsigned int) hexData % (uns
      +                          igned int) 10);
  1550   000B12  C046  F03F         	movff	displayInt@hexData,___lwmod@dividend
  1551   000B16  C047  F040         	movff	displayInt@hexData+1,___lwmod@dividend+1
  1552   000B1A  0E00               	movlw	0
  1553   000B1C  6E42               	movwf	(___lwmod@divisor+1)^0,c
  1554   000B1E  0E0A               	movlw	10
  1555   000B20  6E41               	movwf	___lwmod@divisor^0,c
  1556   000B22  ECA6  F006         	call	___lwmod	;wreg free
  1557   000B26  503F               	movf	?___lwmod^0,w,c
  1558   000B28  6E49               	movwf	displayInt@temp^0,c
  1559   000B2A                     
  1560                           ;displayKeyTickCPU.c: 298:         digitAssign(temp, i);
  1561   000B2A  C04A  F03F         	movff	displayInt@i,digitAssign@digitNo
  1562   000B2E  5049               	movf	displayInt@temp^0,w,c
  1563   000B30  ECD0  F007         	call	_digitAssign
  1564   000B34                     
  1565                           ;displayKeyTickCPU.c: 300:         hexData = (unsigned int) (hexData - (unsigned int) te
      +                          mp) / (unsigned int) 10;
  1566   000B34  5049               	movf	displayInt@temp^0,w,c
  1567   000B36  5C46               	subwf	displayInt@hexData^0,w,c
  1568   000B38  6E3F               	movwf	___lwdiv@dividend^0,c
  1569   000B3A  5047               	movf	(displayInt@hexData+1)^0,w,c
  1570   000B3C  A0D8               	btfss	status,0,c
  1571   000B3E  0447               	decf	(displayInt@hexData+1)^0,w,c
  1572   000B40  6E40               	movwf	(___lwdiv@dividend+1)^0,c
  1573   000B42  0E00               	movlw	0
  1574   000B44  6E42               	movwf	(___lwdiv@divisor+1)^0,c
  1575   000B46  0E0A               	movlw	10
  1576   000B48  6E41               	movwf	___lwdiv@divisor^0,c
  1577   000B4A  EC39  F006         	call	___lwdiv	;wreg free
  1578   000B4E  C03F  F046         	movff	?___lwdiv,displayInt@hexData
  1579   000B52  C040  F047         	movff	?___lwdiv+1,displayInt@hexData+1
  1580   000B56                     
  1581                           ;displayKeyTickCPU.c: 301:         if (dotPosition < 4)
  1582   000B56  0E04               	movlw	4
  1583   000B58  6048               	cpfslt	displayInt@dotPosition^0,c
  1584   000B5A  EFB1  F005         	goto	u1541
  1585   000B5E  EFB3  F005         	goto	u1540
  1586   000B62                     u1541:
  1587   000B62  EFC7  F005         	goto	l2363
  1588   000B66                     u1540:
  1589   000B66                     
  1590                           ;displayKeyTickCPU.c: 302:             if (i >= dotPosition)
  1591   000B66  5048               	movf	displayInt@dotPosition^0,w,c
  1592   000B68  5C4A               	subwf	displayInt@i^0,w,c
  1593   000B6A  A0D8               	btfss	status,0,c
  1594   000B6C  EFBA  F005         	goto	u1551
  1595   000B70  EFBC  F005         	goto	u1550
  1596   000B74                     u1551:
  1597   000B74  EFC7  F005         	goto	l2363
  1598   000B78                     u1550:
  1599   000B78                     
  1600                           ;displayKeyTickCPU.c: 303:                 if (hexData == 0)
  1601   000B78  5046               	movf	displayInt@hexData^0,w,c
  1602   000B7A  1047               	iorwf	(displayInt@hexData+1)^0,w,c
  1603   000B7C  A4D8               	btfss	status,2,c
  1604   000B7E  EFC3  F005         	goto	u1561
  1605   000B82  EFC5  F005         	goto	u1560
  1606   000B86                     u1561:
  1607   000B86  EFC7  F005         	goto	l2363
  1608   000B8A                     u1560:
  1609   000B8A  EFD0  F005         	goto	l2367
  1610   000B8E                     l2363:
  1611                           
  1612                           ;displayKeyTickCPU.c: 305:         i++;
  1613   000B8E  2A4A               	incf	displayInt@i^0,f,c
  1614   000B90                     
  1615                           ;displayKeyTickCPU.c: 306:     } while (i <= 5);
  1616   000B90  0E05               	movlw	5
  1617   000B92  644A               	cpfsgt	displayInt@i^0,c
  1618   000B94  EFCE  F005         	goto	u1571
  1619   000B98  EFD0  F005         	goto	u1570
  1620   000B9C                     u1571:
  1621   000B9C  EF7F  F005         	goto	l2345
  1622   000BA0                     u1570:
  1623   000BA0                     l2367:
  1624                           
  1625                           ;displayKeyTickCPU.c: 308:     if (dotPosition < 4)
  1626   000BA0  0E04               	movlw	4
  1627   000BA2  6048               	cpfslt	displayInt@dotPosition^0,c
  1628   000BA4  EFD6  F005         	goto	u1581
  1629   000BA8  EFD8  F005         	goto	u1580
  1630   000BAC                     u1581:
  1631   000BAC  EFDD  F005         	goto	l269
  1632   000BB0                     u1580:
  1633   000BB0                     
  1634                           ;displayKeyTickCPU.c: 309:         directOrWithDisplay(0x80, dotPosition);
  1635   000BB0  C048  F03F         	movff	displayInt@dotPosition,directOrWithDisplay@digitNo
  1636   000BB4  0E80               	movlw	128
  1637   000BB6  EC12  F008         	call	_directOrWithDisplay
  1638   000BBA                     l269:
  1639   000BBA  0012               	return		;funcret
  1640   000BBC                     __end_of_displayInt:
  1641                           	callstack 0
  1642                           
  1643 ;; *************** function _directOrWithDisplay *****************
  1644 ;; Defined at:
  1645 ;;		line 199 in file "displayKeyTickCPU.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  segmentValue    1    wreg     unsigned char 
  1648 ;;  digitNo         1   11[COMRAM] unsigned char 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  segmentValue    1   12[COMRAM] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  1    wreg      void 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1655 ;; Tracked objects:
  1656 ;;		On entry : 0/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1660 ;;      Params:         1       0       0       0       0       0       0
  1661 ;;      Locals:         1       0       0       0       0       0       0
  1662 ;;      Temps:          0       0       0       0       0       0       0
  1663 ;;      Totals:         2       0       0       0       0       0       0
  1664 ;;Total ram usage:        2 bytes
  1665 ;; Hardware stack levels used: 1
  1666 ;; Hardware stack levels required when called: 3
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_displayInt
  1671 ;;		_displaySignedInt
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	text7
  1676   001024                     __ptext7:
  1677                           	callstack 0
  1678   001024                     _directOrWithDisplay:
  1679                           	callstack 26
  1680                           
  1681                           ;incstack = 0
  1682                           ;directOrWithDisplay@segmentValue stored from wreg
  1683   001024  6E40               	movwf	directOrWithDisplay@segmentValue^0,c
  1684   001026                     
  1685                           ;displayKeyTickCPU.c: 200:     if (digitNo < 4)
  1686   001026  0E04               	movlw	4
  1687   001028  603F               	cpfslt	directOrWithDisplay@digitNo^0,c
  1688   00102A  EF19  F008         	goto	u1211
  1689   00102E  EF1B  F008         	goto	u1210
  1690   001032                     u1211:
  1691   001032  EF23  F008         	goto	l247
  1692   001036                     u1210:
  1693   001036                     
  1694                           ;displayKeyTickCPU.c: 201:         *(pucDispBuffer + digitNo) |= segmentValue;
  1695   001036  503F               	movf	directOrWithDisplay@digitNo^0,w,c
  1696   001038  2453               	addwf	_pucDispBuffer^0,w,c
  1697   00103A  6ED9               	movwf	fsr2l,c
  1698   00103C  0E00               	movlw	0
  1699   00103E  2054               	addwfc	(_pucDispBuffer+1)^0,w,c
  1700   001040  6EDA               	movwf	fsr2h,c
  1701   001042  5040               	movf	directOrWithDisplay@segmentValue^0,w,c
  1702   001044  12DF               	iorwf	indf2,f,c
  1703   001046                     l247:
  1704   001046  0012               	return		;funcret
  1705   001048                     __end_of_directOrWithDisplay:
  1706                           	callstack 0
  1707                           
  1708 ;; *************** function _digitAssign *****************
  1709 ;; Defined at:
  1710 ;;		line 214 in file "displayKeyTickCPU.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  segmentValue    1    wreg     unsigned char 
  1713 ;;  digitNo         1   11[COMRAM] unsigned char 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  segmentValue    1   12[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         1       0       0       0       0       0       0
  1726 ;;      Locals:         1       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0
  1728 ;;      Totals:         2       0       0       0       0       0       0
  1729 ;;Total ram usage:        2 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 3
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;;		_displayInt
  1737 ;;		_displaySignedInt
  1738 ;;		_displayCharInPos
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text8
  1743   000FA0                     __ptext8:
  1744                           	callstack 0
  1745   000FA0                     _digitAssign:
  1746                           	callstack 26
  1747                           
  1748                           ;incstack = 0
  1749                           ;digitAssign@segmentValue stored from wreg
  1750   000FA0  6E40               	movwf	digitAssign@segmentValue^0,c
  1751   000FA2                     
  1752                           ;displayKeyTickCPU.c: 215:     if (digitNo < 4)
  1753   000FA2  0E04               	movlw	4
  1754   000FA4  603F               	cpfslt	digitAssign@digitNo^0,c
  1755   000FA6  EFD7  F007         	goto	u1181
  1756   000FAA  EFD9  F007         	goto	u1180
  1757   000FAE                     u1181:
  1758   000FAE  EFE8  F007         	goto	l259
  1759   000FB2                     u1180:
  1760   000FB2                     
  1761                           ;displayKeyTickCPU.c: 216:         *(pucDispBuffer + digitNo) = int2sevenSeg[segmentValu
      +                          e];
  1762   000FB2  0E01               	movlw	low _int2sevenSeg
  1763   000FB4  2440               	addwf	digitAssign@segmentValue^0,w,c
  1764   000FB6  6EF6               	movwf	tblptrl,c
  1765   000FB8  6AF7               	clrf	tblptrh,c
  1766   000FBA  0E06               	movlw	high _int2sevenSeg
  1767   000FBC  22F7               	addwfc	tblptrh,f,c
  1768   000FBE                     	if	0	;There are less than 3 active tblptr bytes
  1769   000FBE                     	endif
  1770   000FBE  503F               	movf	digitAssign@digitNo^0,w,c
  1771   000FC0  2453               	addwf	_pucDispBuffer^0,w,c
  1772   000FC2  6ED9               	movwf	fsr2l,c
  1773   000FC4  0E00               	movlw	0
  1774   000FC6  2054               	addwfc	(_pucDispBuffer+1)^0,w,c
  1775   000FC8  6EDA               	movwf	fsr2h,c
  1776   000FCA  0008               	tblrd		*
  1777   000FCC  CFF5 FFDF          	movff	tablat,indf2
  1778   000FD0                     l259:
  1779   000FD0  0012               	return		;funcret
  1780   000FD2                     __end_of_digitAssign:
  1781                           	callstack 0
  1782                           
  1783 ;; *************** function _clear *****************
  1784 ;; Defined at:
  1785 ;;		line 187 in file "displayKeyTickCPU.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  i               1   11[COMRAM] unsigned char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1799 ;;      Params:         0       0       0       0       0       0       0
  1800 ;;      Locals:         1       0       0       0       0       0       0
  1801 ;;      Temps:          0       0       0       0       0       0       0
  1802 ;;      Totals:         1       0       0       0       0       0       0
  1803 ;;Total ram usage:        1 bytes
  1804 ;; Hardware stack levels used: 1
  1805 ;; Hardware stack levels required when called: 3
  1806 ;; This function calls:
  1807 ;;		Nothing
  1808 ;; This function is called by:
  1809 ;;		_displayInt
  1810 ;;		_clearDisplay
  1811 ;;		_displaySignedInt
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text9
  1816   000FFE                     __ptext9:
  1817                           	callstack 0
  1818   000FFE                     _clear:
  1819                           	callstack 26
  1820   000FFE                     
  1821                           ;displayKeyTickCPU.c: 188:     unsigned char i;;displayKeyTickCPU.c: 189:     for (i = 0
      +                          ; i < 4; i++) {
  1822   000FFE  0E00               	movlw	0
  1823   001000  6E3F               	movwf	clear@i^0,c
  1824   001002                     l2165:
  1825                           
  1826                           ;displayKeyTickCPU.c: 190:         *(pucDispBuffer + i) = 0x00;
  1827   001002  503F               	movf	clear@i^0,w,c
  1828   001004  2453               	addwf	_pucDispBuffer^0,w,c
  1829   001006  6ED9               	movwf	fsr2l,c
  1830   001008  0E00               	movlw	0
  1831   00100A  2054               	addwfc	(_pucDispBuffer+1)^0,w,c
  1832   00100C  6EDA               	movwf	fsr2h,c
  1833   00100E  6ADF               	clrf	indf2,c
  1834   001010                     
  1835                           ;displayKeyTickCPU.c: 191:     }
  1836   001010  2A3F               	incf	clear@i^0,f,c
  1837   001012  0E03               	movlw	3
  1838   001014  643F               	cpfsgt	clear@i^0,c
  1839   001016  EF0F  F008         	goto	u1201
  1840   00101A  EF11  F008         	goto	u1200
  1841   00101E                     u1201:
  1842   00101E  EF01  F008         	goto	l2165
  1843   001022                     u1200:
  1844   001022  0012               	return		;funcret
  1845   001024                     __end_of_clear:
  1846                           	callstack 0
  1847                           
  1848 ;; *************** function ___lwmod *****************
  1849 ;; Defined at:
  1850 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwmod.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  dividend        2   11[COMRAM] unsigned int 
  1853 ;;  divisor         2   13[COMRAM] unsigned int 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  counter         1   15[COMRAM] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  2   11[COMRAM] unsigned int 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1865 ;;      Params:         4       0       0       0       0       0       0
  1866 ;;      Locals:         1       0       0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0
  1868 ;;      Totals:         5       0       0       0       0       0       0
  1869 ;;Total ram usage:        5 bytes
  1870 ;; Hardware stack levels used: 1
  1871 ;; Hardware stack levels required when called: 3
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_displayInt
  1876 ;;		_displaySignedInt
  1877 ;;		_checkAndInrDcrIntShift
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text10
  1882   000D4C                     __ptext10:
  1883                           	callstack 0
  1884   000D4C                     ___lwmod:
  1885                           	callstack 26
  1886   000D4C  5041               	movf	___lwmod@divisor^0,w,c
  1887   000D4E  1042               	iorwf	(___lwmod@divisor+1)^0,w,c
  1888   000D50  B4D8               	btfsc	status,2,c
  1889   000D52  EFAD  F006         	goto	u1271
  1890   000D56  EFAF  F006         	goto	u1270
  1891   000D5A                     u1271:
  1892   000D5A  EFD3  F006         	goto	l1057
  1893   000D5E                     u1270:
  1894   000D5E  0E01               	movlw	1
  1895   000D60  6E43               	movwf	___lwmod@counter^0,c
  1896   000D62  EFB7  F006         	goto	l2223
  1897   000D66                     l2221:
  1898   000D66  90D8               	bcf	status,0,c
  1899   000D68  3641               	rlcf	___lwmod@divisor^0,f,c
  1900   000D6A  3642               	rlcf	(___lwmod@divisor+1)^0,f,c
  1901   000D6C  2A43               	incf	___lwmod@counter^0,f,c
  1902   000D6E                     l2223:
  1903   000D6E  AE42               	btfss	(___lwmod@divisor+1)^0,7,c
  1904   000D70  EFBC  F006         	goto	u1281
  1905   000D74  EFBE  F006         	goto	u1280
  1906   000D78                     u1281:
  1907   000D78  EFB3  F006         	goto	l2221
  1908   000D7C                     u1280:
  1909   000D7C                     l2225:
  1910   000D7C  5041               	movf	___lwmod@divisor^0,w,c
  1911   000D7E  5C3F               	subwf	___lwmod@dividend^0,w,c
  1912   000D80  5042               	movf	(___lwmod@divisor+1)^0,w,c
  1913   000D82  5840               	subwfb	(___lwmod@dividend+1)^0,w,c
  1914   000D84  A0D8               	btfss	status,0,c
  1915   000D86  EFC7  F006         	goto	u1291
  1916   000D8A  EFC9  F006         	goto	u1290
  1917   000D8E                     u1291:
  1918   000D8E  EFCD  F006         	goto	l2229
  1919   000D92                     u1290:
  1920   000D92  5041               	movf	___lwmod@divisor^0,w,c
  1921   000D94  5E3F               	subwf	___lwmod@dividend^0,f,c
  1922   000D96  5042               	movf	(___lwmod@divisor+1)^0,w,c
  1923   000D98  5A40               	subwfb	(___lwmod@dividend+1)^0,f,c
  1924   000D9A                     l2229:
  1925   000D9A  90D8               	bcf	status,0,c
  1926   000D9C  3242               	rrcf	(___lwmod@divisor+1)^0,f,c
  1927   000D9E  3241               	rrcf	___lwmod@divisor^0,f,c
  1928   000DA0  2E43               	decfsz	___lwmod@counter^0,f,c
  1929   000DA2  EFBE  F006         	goto	l2225
  1930   000DA6                     l1057:
  1931   000DA6  C03F  F03F         	movff	___lwmod@dividend,?___lwmod
  1932   000DAA  C040  F040         	movff	___lwmod@dividend+1,?___lwmod+1
  1933   000DAE  0012               	return		;funcret
  1934   000DB0                     __end_of___lwmod:
  1935                           	callstack 0
  1936                           
  1937 ;; *************** function ___lwdiv *****************
  1938 ;; Defined at:
  1939 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwdiv.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  dividend        2   11[COMRAM] unsigned int 
  1942 ;;  divisor         2   13[COMRAM] unsigned int 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  quotient        2   15[COMRAM] unsigned int 
  1945 ;;  counter         1   17[COMRAM] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  2   11[COMRAM] unsigned int 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1955 ;;      Params:         4       0       0       0       0       0       0
  1956 ;;      Locals:         3       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0
  1958 ;;      Totals:         7       0       0       0       0       0       0
  1959 ;;Total ram usage:        7 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 3
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_displayInt
  1966 ;;		_displaySignedInt
  1967 ;;		_checkAndInrDcrIntShift
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text11
  1972   000C72                     __ptext11:
  1973                           	callstack 0
  1974   000C72                     ___lwdiv:
  1975                           	callstack 26
  1976   000C72  0E00               	movlw	0
  1977   000C74  6E44               	movwf	(___lwdiv@quotient+1)^0,c
  1978   000C76  0E00               	movlw	0
  1979   000C78  6E43               	movwf	___lwdiv@quotient^0,c
  1980   000C7A  5041               	movf	___lwdiv@divisor^0,w,c
  1981   000C7C  1042               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1982   000C7E  B4D8               	btfsc	status,2,c
  1983   000C80  EF44  F006         	goto	u1241
  1984   000C84  EF46  F006         	goto	u1240
  1985   000C88                     u1241:
  1986   000C88  EF6E  F006         	goto	l1047
  1987   000C8C                     u1240:
  1988   000C8C  0E01               	movlw	1
  1989   000C8E  6E45               	movwf	___lwdiv@counter^0,c
  1990   000C90  EF4E  F006         	goto	l2203
  1991   000C94                     l2201:
  1992   000C94  90D8               	bcf	status,0,c
  1993   000C96  3641               	rlcf	___lwdiv@divisor^0,f,c
  1994   000C98  3642               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1995   000C9A  2A45               	incf	___lwdiv@counter^0,f,c
  1996   000C9C                     l2203:
  1997   000C9C  AE42               	btfss	(___lwdiv@divisor+1)^0,7,c
  1998   000C9E  EF53  F006         	goto	u1251
  1999   000CA2  EF55  F006         	goto	u1250
  2000   000CA6                     u1251:
  2001   000CA6  EF4A  F006         	goto	l2201
  2002   000CAA                     u1250:
  2003   000CAA                     l2205:
  2004   000CAA  90D8               	bcf	status,0,c
  2005   000CAC  3643               	rlcf	___lwdiv@quotient^0,f,c
  2006   000CAE  3644               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2007   000CB0  5041               	movf	___lwdiv@divisor^0,w,c
  2008   000CB2  5C3F               	subwf	___lwdiv@dividend^0,w,c
  2009   000CB4  5042               	movf	(___lwdiv@divisor+1)^0,w,c
  2010   000CB6  5840               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2011   000CB8  A0D8               	btfss	status,0,c
  2012   000CBA  EF61  F006         	goto	u1261
  2013   000CBE  EF63  F006         	goto	u1260
  2014   000CC2                     u1261:
  2015   000CC2  EF68  F006         	goto	l2213
  2016   000CC6                     u1260:
  2017   000CC6  5041               	movf	___lwdiv@divisor^0,w,c
  2018   000CC8  5E3F               	subwf	___lwdiv@dividend^0,f,c
  2019   000CCA  5042               	movf	(___lwdiv@divisor+1)^0,w,c
  2020   000CCC  5A40               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2021   000CCE  8043               	bsf	___lwdiv@quotient^0,0,c
  2022   000CD0                     l2213:
  2023   000CD0  90D8               	bcf	status,0,c
  2024   000CD2  3242               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2025   000CD4  3241               	rrcf	___lwdiv@divisor^0,f,c
  2026   000CD6  2E45               	decfsz	___lwdiv@counter^0,f,c
  2027   000CD8  EF55  F006         	goto	l2205
  2028   000CDC                     l1047:
  2029   000CDC  C043  F03F         	movff	___lwdiv@quotient,?___lwdiv
  2030   000CE0  C044  F040         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2031   000CE4  0012               	return		;funcret
  2032   000CE6                     __end_of___lwdiv:
  2033                           	callstack 0
  2034                           
  2035 ;; *************** function _display *****************
  2036 ;; Defined at:
  2037 ;;		line 176 in file "displayKeyTickCPU.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;		None
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;		None
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, status,2
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2051 ;;      Params:         0       0       0       0       0       0       0
  2052 ;;      Locals:         0       0       0       0       0       0       0
  2053 ;;      Temps:          0       0       0       0       0       0       0
  2054 ;;      Totals:         0       0       0       0       0       0       0
  2055 ;;Total ram usage:        0 bytes
  2056 ;; Hardware stack levels used: 1
  2057 ;; Hardware stack levels required when called: 3
  2058 ;; This function calls:
  2059 ;;		Nothing
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;;		_clearDisplay
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text12
  2067   001086                     __ptext12:
  2068                           	callstack 0
  2069   001086                     _display:
  2070                           	callstack 27
  2071   001086                     
  2072                           ;displayKeyTickCPU.c: 180:     bRequestBufferReleaseForWriting = 1;
  2073   001086  0E01               	movlw	1
  2074   001088  6E1B               	movwf	_bRequestBufferReleaseForWriting^0,c	;volatile
  2075   00108A                     l231:
  2076                           
  2077                           ;displayKeyTickCPU.c: 182:         if (!bRequestBufferReleaseForWriting)
  2078   00108A  501B               	movf	_bRequestBufferReleaseForWriting^0,w,c	;volatile
  2079   00108C  A4D8               	btfss	status,2,c
  2080   00108E  EF4B  F008         	goto	u1671
  2081   001092  EF4D  F008         	goto	u1670
  2082   001096                     u1671:
  2083   001096  EF45  F008         	goto	l231
  2084   00109A                     u1670:
  2085   00109A  0012               	return		;funcret
  2086   00109C                     __end_of_display:
  2087                           	callstack 0
  2088                           
  2089 ;; *************** function _directAssign *****************
  2090 ;; Defined at:
  2091 ;;		line 209 in file "displayKeyTickCPU.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;  segmentValue    1    wreg     unsigned char 
  2094 ;;  digitNo         1   11[COMRAM] unsigned char 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  segmentValue    1   12[COMRAM] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2106 ;;      Params:         1       0       0       0       0       0       0
  2107 ;;      Locals:         1       0       0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0
  2109 ;;      Totals:         2       0       0       0       0       0       0
  2110 ;;Total ram usage:        2 bytes
  2111 ;; Hardware stack levels used: 1
  2112 ;; Hardware stack levels required when called: 3
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;;		_displayCharInPos
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           	psect	text13
  2122   001048                     __ptext13:
  2123                           	callstack 0
  2124   001048                     _directAssign:
  2125                           	callstack 27
  2126                           
  2127                           ;incstack = 0
  2128                           ;directAssign@segmentValue stored from wreg
  2129   001048  6E40               	movwf	directAssign@segmentValue^0,c
  2130   00104A                     
  2131                           ;displayKeyTickCPU.c: 210:     if (digitNo < 4)
  2132   00104A  0E04               	movlw	4
  2133   00104C  603F               	cpfslt	directAssign@digitNo^0,c
  2134   00104E  EF2B  F008         	goto	u1661
  2135   001052  EF2D  F008         	goto	u1660
  2136   001056                     u1661:
  2137   001056  EF35  F008         	goto	l255
  2138   00105A                     u1660:
  2139   00105A                     
  2140                           ;displayKeyTickCPU.c: 211:         *(pucDispBuffer + digitNo) = segmentValue;
  2141   00105A  503F               	movf	directAssign@digitNo^0,w,c
  2142   00105C  2453               	addwf	_pucDispBuffer^0,w,c
  2143   00105E  6ED9               	movwf	fsr2l,c
  2144   001060  0E00               	movlw	0
  2145   001062  2054               	addwfc	(_pucDispBuffer+1)^0,w,c
  2146   001064  6EDA               	movwf	fsr2h,c
  2147   001066  C040  FFDF         	movff	directAssign@segmentValue,indf2
  2148   00106A                     l255:
  2149   00106A  0012               	return		;funcret
  2150   00106C                     __end_of_directAssign:
  2151                           	callstack 0
  2152                           
  2153 ;; *************** function _checkAndInrDcrChar *****************
  2154 ;; Defined at:
  2155 ;;		line 373 in file "displayKeyTickCPU.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  value           2   11[COMRAM] PTR unsigned char 
  2158 ;;		 -> SetPoint(1), 
  2159 ;;  upperLimit      1   13[COMRAM] unsigned char 
  2160 ;;  lowerLimit      1   14[COMRAM] unsigned char 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  1    wreg      unsigned char 
  2165 ;; Registers used:
  2166 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2172 ;;      Params:         4       0       0       0       0       0       0
  2173 ;;      Locals:         0       0       0       0       0       0       0
  2174 ;;      Temps:          1       0       0       0       0       0       0
  2175 ;;      Totals:         5       0       0       0       0       0       0
  2176 ;;Total ram usage:        5 bytes
  2177 ;; Hardware stack levels used: 1
  2178 ;; Hardware stack levels required when called: 3
  2179 ;; This function calls:
  2180 ;;		Nothing
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           	psect	text14
  2187   000BBC                     __ptext14:
  2188                           	callstack 0
  2189   000BBC                     _checkAndInrDcrChar:
  2190                           	callstack 27
  2191   000BBC                     
  2192                           ;displayKeyTickCPU.c: 374:     if ((keyDown & 0x02) || (keyHold & 0x02)) {
  2193   000BBC  B227               	btfsc	_keyDown^0,1,c
  2194   000BBE  EFE3  F005         	goto	u1591
  2195   000BC2  EFE5  F005         	goto	u1590
  2196   000BC6                     u1591:
  2197   000BC6  EFEC  F005         	goto	l2375
  2198   000BCA                     u1590:
  2199   000BCA  A226               	btfss	_keyHold^0,1,c
  2200   000BCC  EFEA  F005         	goto	u1601
  2201   000BD0  EFEC  F005         	goto	u1600
  2202   000BD4                     u1601:
  2203   000BD4  EF0C  F006         	goto	l289
  2204   000BD8                     u1600:
  2205   000BD8                     l2375:
  2206                           
  2207                           ;displayKeyTickCPU.c: 375:         keyDown = 0x00;
  2208   000BD8  0E00               	movlw	0
  2209   000BDA  6E27               	movwf	_keyDown^0,c
  2210                           
  2211                           ;displayKeyTickCPU.c: 376:         keyHold = 0x00;
  2212   000BDC  0E00               	movlw	0
  2213   000BDE  6E26               	movwf	_keyHold^0,c
  2214   000BE0                     
  2215                           ;displayKeyTickCPU.c: 377:         if ((*value) < upperLimit)
  2216   000BE0  C03F  FFD9         	movff	checkAndInrDcrChar@value,fsr2l
  2217   000BE4  C040  FFDA         	movff	checkAndInrDcrChar@value+1,fsr2h
  2218   000BE8  5041               	movf	checkAndInrDcrChar@upperLimit^0,w,c
  2219   000BEA  5CDE               	subwf	postinc2,w,c
  2220   000BEC  B0D8               	btfsc	status,0,c
  2221   000BEE  EFFB  F005         	goto	u1611
  2222   000BF2  EFFD  F005         	goto	u1610
  2223   000BF6                     u1611:
  2224   000BF6  EF04  F006         	goto	l2381
  2225   000BFA                     u1610:
  2226   000BFA                     
  2227                           ;displayKeyTickCPU.c: 378:             (*value)++;
  2228   000BFA  C03F  FFD9         	movff	checkAndInrDcrChar@value,fsr2l
  2229   000BFE  C040  FFDA         	movff	checkAndInrDcrChar@value+1,fsr2h
  2230   000C02  2ADF               	incf	indf2,f,c
  2231   000C04  EF38  F006         	goto	l294
  2232   000C08                     l2381:
  2233                           
  2234                           ;displayKeyTickCPU.c: 380:             (*value) = upperLimit;
  2235   000C08  C03F  FFD9         	movff	checkAndInrDcrChar@value,fsr2l
  2236   000C0C  C040  FFDA         	movff	checkAndInrDcrChar@value+1,fsr2h
  2237   000C10  C041  FFDF         	movff	checkAndInrDcrChar@upperLimit,indf2
  2238   000C14  EF38  F006         	goto	l294
  2239   000C18                     l289:
  2240                           
  2241                           ;displayKeyTickCPU.c: 383:     if ((keyDown & 0x01) || (keyHold & 0x01)) {
  2242   000C18  B027               	btfsc	_keyDown^0,0,c
  2243   000C1A  EF11  F006         	goto	u1621
  2244   000C1E  EF13  F006         	goto	u1620
  2245   000C22                     u1621:
  2246   000C22  EF1A  F006         	goto	l2387
  2247   000C26                     u1620:
  2248   000C26  A026               	btfss	_keyHold^0,0,c
  2249   000C28  EF18  F006         	goto	u1631
  2250   000C2C  EF1A  F006         	goto	u1630
  2251   000C30                     u1631:
  2252   000C30  EF38  F006         	goto	l294
  2253   000C34                     u1630:
  2254   000C34                     l2387:
  2255                           
  2256                           ;displayKeyTickCPU.c: 384:         keyDown = 0x00;
  2257   000C34  0E00               	movlw	0
  2258   000C36  6E27               	movwf	_keyDown^0,c
  2259                           
  2260                           ;displayKeyTickCPU.c: 385:         keyHold = 0x00;
  2261   000C38  0E00               	movlw	0
  2262   000C3A  6E26               	movwf	_keyHold^0,c
  2263   000C3C                     
  2264                           ;displayKeyTickCPU.c: 386:         if ((*value) > lowerLimit)
  2265   000C3C  C03F  FFD9         	movff	checkAndInrDcrChar@value,fsr2l
  2266   000C40  C040  FFDA         	movff	checkAndInrDcrChar@value+1,fsr2h
  2267   000C44  50DE               	movf	postinc2,w,c
  2268   000C46  5C42               	subwf	checkAndInrDcrChar@lowerLimit^0,w,c
  2269   000C48  B0D8               	btfsc	status,0,c
  2270   000C4A  EF29  F006         	goto	u1641
  2271   000C4E  EF2B  F006         	goto	u1640
  2272   000C52                     u1641:
  2273   000C52  EF32  F006         	goto	l2393
  2274   000C56                     u1640:
  2275   000C56                     
  2276                           ;displayKeyTickCPU.c: 387:             (*value)--;
  2277   000C56  C03F  FFD9         	movff	checkAndInrDcrChar@value,fsr2l
  2278   000C5A  C040  FFDA         	movff	checkAndInrDcrChar@value+1,fsr2h
  2279   000C5E  06DF               	decf	indf2,f,c
  2280   000C60  EF38  F006         	goto	l294
  2281   000C64                     l2393:
  2282                           
  2283                           ;displayKeyTickCPU.c: 389:             (*value) = lowerLimit;
  2284   000C64  C03F  FFD9         	movff	checkAndInrDcrChar@value,fsr2l
  2285   000C68  C040  FFDA         	movff	checkAndInrDcrChar@value+1,fsr2h
  2286   000C6C  C042  FFDF         	movff	checkAndInrDcrChar@lowerLimit,indf2
  2287   000C70                     l294:
  2288   000C70  0012               	return		;funcret
  2289   000C72                     __end_of_checkAndInrDcrChar:
  2290                           	callstack 0
  2291                           
  2292 ;; *************** function _SYSTEM_Initialize *****************
  2293 ;; Defined at:
  2294 ;;		line 136 in file "main.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;		None
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      void 
  2301 ;; Registers used:
  2302 ;;		wreg, status,2, status,0, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2308 ;;      Params:         0       0       0       0       0       0       0
  2309 ;;      Locals:         0       0       0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0       0       0
  2311 ;;      Totals:         0       0       0       0       0       0       0
  2312 ;;Total ram usage:        0 bytes
  2313 ;; Hardware stack levels used: 1
  2314 ;; Hardware stack levels required when called: 4
  2315 ;; This function calls:
  2316 ;;		_INTERRUPT_Initialize
  2317 ;;		_initDisplay
  2318 ;;		_initExternalInterrupt
  2319 ;;		_initTimer0
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text15
  2326   0010B0                     __ptext15:
  2327                           	callstack 0
  2328   0010B0                     _SYSTEM_Initialize:
  2329                           	callstack 26
  2330   0010B0                     
  2331                           ;main.c: 138:     INTERRUPT_Initialize();
  2332   0010B0  EC69  F008         	call	_INTERRUPT_Initialize	;wreg free
  2333   0010B4                     
  2334                           ;main.c: 139:     initDisplay();
  2335   0010B4  ECE9  F007         	call	_initDisplay	;wreg free
  2336   0010B8                     
  2337                           ;main.c: 140:     initTimer0();
  2338   0010B8  EC36  F008         	call	_initTimer0	;wreg free
  2339   0010BC                     
  2340                           ;main.c: 141:     initExternalInterrupt();
  2341   0010BC  EC61  F008         	call	_initExternalInterrupt	;wreg free
  2342   0010C0  0012               	return		;funcret
  2343   0010C2                     __end_of_SYSTEM_Initialize:
  2344                           	callstack 0
  2345                           
  2346 ;; *************** function _initTimer0 *****************
  2347 ;; Defined at:
  2348 ;;		line 11 in file "tick.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2362 ;;      Params:         0       0       0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0       0
  2364 ;;      Temps:          0       0       0       0       0       0       0
  2365 ;;      Totals:         0       0       0       0       0       0       0
  2366 ;;Total ram usage:        0 bytes
  2367 ;; Hardware stack levels used: 1
  2368 ;; Hardware stack levels required when called: 3
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_SYSTEM_Initialize
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           	psect	text16
  2377   00106C                     __ptext16:
  2378                           	callstack 0
  2379   00106C                     _initTimer0:
  2380                           	callstack 26
  2381   00106C                     
  2382                           ;tick.c: 52:     timer0ReloadVal = 217;
  2383   00106C  0ED9               	movlw	217
  2384   00106E  6E2A               	movwf	_timer0ReloadVal^0,c	;volatile
  2385   001070                     
  2386                           ;tick.c: 53:     TMR0L = timer0ReloadVal;
  2387   001070  C02A  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  2388                           
  2389                           ;tick.c: 54:     TMR0H = 0;
  2390   001074  0E00               	movlw	0
  2391   001076  6ED7               	movwf	215,c	;volatile
  2392                           
  2393                           ;tick.c: 55:     T0CON = 0b01000111;
  2394   001078  0E47               	movlw	71
  2395   00107A  6ED5               	movwf	213,c	;volatile
  2396   00107C                     
  2397                           ;tick.c: 56:     INTCONbits.TMR0IF = 1;
  2398   00107C  84F2               	bsf	242,2,c	;volatile
  2399   00107E                     
  2400                           ;tick.c: 57:     INTCONbits.TMR0IE = 1;
  2401   00107E  8AF2               	bsf	242,5,c	;volatile
  2402   001080                     
  2403                           ;tick.c: 58:     INTCON2bits.TMR0IP = 0;
  2404   001080  94F1               	bcf	241,2,c	;volatile
  2405   001082                     
  2406                           ;tick.c: 61:     T0CONbits.TMR0ON = 1;
  2407   001082  8ED5               	bsf	213,7,c	;volatile
  2408   001084  0012               	return		;funcret
  2409   001086                     __end_of_initTimer0:
  2410                           	callstack 0
  2411                           
  2412 ;; *************** function _initExternalInterrupt *****************
  2413 ;; Defined at:
  2414 ;;		line 199 in file "tick.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		None
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2428 ;;      Params:         0       0       0       0       0       0       0
  2429 ;;      Locals:         0       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0
  2431 ;;      Totals:         0       0       0       0       0       0       0
  2432 ;;Total ram usage:        0 bytes
  2433 ;; Hardware stack levels used: 1
  2434 ;; Hardware stack levels required when called: 3
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_SYSTEM_Initialize
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text17
  2443   0010C2                     __ptext17:
  2444                           	callstack 0
  2445   0010C2                     _initExternalInterrupt:
  2446                           	callstack 26
  2447   0010C2                     
  2448                           ;tick.c: 303:     TRISBbits.TRISB0 = 1;
  2449   0010C2  8093               	bsf	147,0,c	;volatile
  2450                           
  2451                           ;tick.c: 304:     INTCON2bits.INTEDG0 = 0;
  2452   0010C4  9CF1               	bcf	241,6,c	;volatile
  2453                           
  2454                           ;tick.c: 305:     INTCONbits.INT0IF = 0;
  2455   0010C6  92F2               	bcf	242,1,c	;volatile
  2456                           
  2457                           ;tick.c: 306:     INTCONbits.INT0IE = 1;
  2458   0010C8  88F2               	bsf	242,4,c	;volatile
  2459   0010CA  0012               	return		;funcret
  2460   0010CC                     __end_of_initExternalInterrupt:
  2461                           	callstack 0
  2462                           
  2463 ;; *************** function _initDisplay *****************
  2464 ;; Defined at:
  2465 ;;		line 155 in file "displayKeyTickCPU.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2479 ;;      Params:         0       0       0       0       0       0       0
  2480 ;;      Locals:         0       0       0       0       0       0       0
  2481 ;;      Temps:          0       0       0       0       0       0       0
  2482 ;;      Totals:         0       0       0       0       0       0       0
  2483 ;;Total ram usage:        0 bytes
  2484 ;; Hardware stack levels used: 1
  2485 ;; Hardware stack levels required when called: 3
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_SYSTEM_Initialize
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text18
  2494   000FD2                     __ptext18:
  2495                           	callstack 0
  2496   000FD2                     _initDisplay:
  2497                           	callstack 26
  2498   000FD2                     
  2499                           ;displayKeyTickCPU.c: 156:     TRISD = 0x00;
  2500   000FD2  0E00               	movlw	0
  2501   000FD4  6E95               	movwf	149,c	;volatile
  2502   000FD6                     
  2503                           ;displayKeyTickCPU.c: 157:     TRISBbits.TRISB4 = 0;
  2504   000FD6  9893               	bcf	147,4,c	;volatile
  2505   000FD8                     
  2506                           ;displayKeyTickCPU.c: 158:     TRISBbits.TRISB5 = 0;
  2507   000FD8  9A93               	bcf	147,5,c	;volatile
  2508   000FDA                     
  2509                           ;displayKeyTickCPU.c: 159:     TRISBbits.TRISB6 = 0;
  2510   000FDA  9C93               	bcf	147,6,c	;volatile
  2511   000FDC                     
  2512                           ;displayKeyTickCPU.c: 160:     TRISBbits.TRISB7 = 0;
  2513   000FDC  9E93               	bcf	147,7,c	;volatile
  2514   000FDE                     
  2515                           ;displayKeyTickCPU.c: 162:     TRISBbits.TRISB1 = 1;
  2516   000FDE  8293               	bsf	147,1,c	;volatile
  2517   000FE0                     
  2518                           ;displayKeyTickCPU.c: 164:     LATBbits.LATB1 = 1;
  2519   000FE0  828A               	bsf	138,1,c	;volatile
  2520   000FE2                     
  2521                           ;displayKeyTickCPU.c: 165:     INTCON2bits.RBPU = 0;
  2522   000FE2  9EF1               	bcf	241,7,c	;volatile
  2523                           
  2524                           ;displayKeyTickCPU.c: 169:     bUseDispBuffer1ForReading = 1;
  2525   000FE4  0E01               	movlw	1
  2526   000FE6  6E1C               	movwf	_bUseDispBuffer1ForReading^0,c	;volatile
  2527   000FE8                     
  2528                           ;displayKeyTickCPU.c: 170:     pucReadDispBuffer = (unsigned char *) &ucDispBuffer1;
  2529   000FE8  0E2F               	movlw	low _ucDispBuffer1
  2530   000FEA  6E4D               	movwf	_pucReadDispBuffer^0,c
  2531   000FEC  0E00               	movlw	high _ucDispBuffer1
  2532   000FEE  6E4E               	movwf	(_pucReadDispBuffer+1)^0,c
  2533   000FF0                     
  2534                           ;displayKeyTickCPU.c: 171:     pucDispBuffer = (unsigned char *) &ucDispBuffer2;
  2535   000FF0  0E2B               	movlw	low _ucDispBuffer2
  2536   000FF2  6E53               	movwf	_pucDispBuffer^0,c
  2537   000FF4  0E00               	movlw	high _ucDispBuffer2
  2538   000FF6  6E54               	movwf	(_pucDispBuffer+1)^0,c
  2539                           
  2540                           ;displayKeyTickCPU.c: 172:     bRequestBufferReleaseForWriting = 0;
  2541   000FF8  0E00               	movlw	0
  2542   000FFA  6E1B               	movwf	_bRequestBufferReleaseForWriting^0,c	;volatile
  2543   000FFC  0012               	return		;funcret
  2544   000FFE                     __end_of_initDisplay:
  2545                           	callstack 0
  2546                           
  2547 ;; *************** function _INTERRUPT_Initialize *****************
  2548 ;; Defined at:
  2549 ;;		line 106 in file "main.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		None
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2563 ;;      Params:         0       0       0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0       0
  2566 ;;      Totals:         0       0       0       0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used: 1
  2569 ;; Hardware stack levels required when called: 3
  2570 ;; This function calls:
  2571 ;;		Nothing
  2572 ;; This function is called by:
  2573 ;;		_SYSTEM_Initialize
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text19
  2578   0010D2                     __ptext19:
  2579                           	callstack 0
  2580   0010D2                     _INTERRUPT_Initialize:
  2581                           	callstack 26
  2582   0010D2                     
  2583                           ;main.c: 108:     RCONbits.IPEN = 0;
  2584   0010D2  9ED0               	bcf	208,7,c	;volatile
  2585   0010D4  0012               	return		;funcret
  2586   0010D6                     __end_of_INTERRUPT_Initialize:
  2587                           	callstack 0
  2588                           
  2589 ;; *************** function _INTERRUPT_InterruptManagerLow *****************
  2590 ;; Defined at:
  2591 ;;		line 111 in file "main.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;		None
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2605 ;;      Params:         0       0       0       0       0       0       0
  2606 ;;      Locals:         0       0       0       0       0       0       0
  2607 ;;      Temps:          2       0       0       0       0       0       0
  2608 ;;      Totals:         2       0       0       0       0       0       0
  2609 ;;Total ram usage:        2 bytes
  2610 ;; Hardware stack levels used: 1
  2611 ;; Hardware stack levels required when called: 2
  2612 ;; This function calls:
  2613 ;;		_displayISR
  2614 ;; This function is called by:
  2615 ;;		Interrupt level 2
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	intcode
  2620   000008                     __pintcode:
  2621                           	callstack 0
  2622   000008                     _INTERRUPT_InterruptManagerLow:
  2623                           	callstack 25
  2624                           
  2625                           ;incstack = 0
  2626   000008  8255               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2627   00000A  ED73  F006         	call	int_func,f	;refresh shadow registers
  2628                           
  2629                           	psect	intcode_body
  2630   000CE6                     __pintcode_body:
  2631                           	callstack 25
  2632   000CE6                     int_func:
  2633                           	callstack 25
  2634   000CE6  0006               	pop		; remove dummy address from shadow register refresh
  2635   000CE8  CFD9 F03D          	movff	fsr2l,??_INTERRUPT_InterruptManagerLow
  2636   000CEC  CFDA F03E          	movff	fsr2h,??_INTERRUPT_InterruptManagerLow+1
  2637   000CF0                     
  2638                           ;main.c: 113:     if (INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  2639   000CF0  AAF2               	btfss	242,5,c	;volatile
  2640   000CF2  EF7D  F006         	goto	i2u168_41
  2641   000CF6  EF7F  F006         	goto	i2u168_40
  2642   000CFA                     i2u168_41:
  2643   000CFA  EF8D  F006         	goto	i2l92
  2644   000CFE                     i2u168_40:
  2645   000CFE  A4F2               	btfss	242,2,c	;volatile
  2646   000D00  EF84  F006         	goto	i2u169_41
  2647   000D04  EF86  F006         	goto	i2u169_40
  2648   000D08                     i2u169_41:
  2649   000D08  EF8D  F006         	goto	i2l92
  2650   000D0C                     i2u169_40:
  2651   000D0C                     
  2652                           ;main.c: 115:         TMR0L = timer0ReloadVal;
  2653   000D0C  C02A  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  2654   000D10                     
  2655                           ;main.c: 116:         displayISR();
  2656   000D10  EC75  F004         	call	_displayISR	;wreg free
  2657   000D14                     
  2658                           ;main.c: 118:         INTCONbits.TMR0IF = 0;
  2659   000D14  94F2               	bcf	242,2,c	;volatile
  2660                           
  2661                           ;main.c: 119:     } else if (INTCONbits.INT0IE && INTCONbits.INT0IF) {
  2662   000D16  EFA0  F006         	goto	i2l95
  2663   000D1A                     i2l92:
  2664   000D1A  A8F2               	btfss	242,4,c	;volatile
  2665   000D1C  EF92  F006         	goto	i2u170_41
  2666   000D20  EF94  F006         	goto	i2u170_40
  2667   000D24                     i2u170_41:
  2668   000D24  EFA0  F006         	goto	i2l95
  2669   000D28                     i2u170_40:
  2670   000D28  A2F2               	btfss	242,1,c	;volatile
  2671   000D2A  EF99  F006         	goto	i2u171_41
  2672   000D2E  EF9B  F006         	goto	i2u171_40
  2673   000D32                     i2u171_41:
  2674   000D32  EFA0  F006         	goto	i2l95
  2675   000D36                     i2u171_40:
  2676   000D36                     
  2677                           ;main.c: 120:         fpsCounter++;
  2678   000D36  4A0F               	infsnz	_fpsCounter^0,f,c
  2679   000D38  2A10               	incf	(_fpsCounter+1)^0,f,c
  2680   000D3A                     
  2681                           ;main.c: 121:         interruptFlag = 1;
  2682   000D3A  0E01               	movlw	1
  2683   000D3C  6E20               	movwf	_interruptFlag^0,c
  2684   000D3E                     
  2685                           ;main.c: 122:         INTCONbits.INT0IF = 0;
  2686   000D3E  92F2               	bcf	242,1,c	;volatile
  2687   000D40                     i2l95:
  2688   000D40  C03E  FFDA         	movff	??_INTERRUPT_InterruptManagerLow+1,fsr2h
  2689   000D44  C03D  FFD9         	movff	??_INTERRUPT_InterruptManagerLow,fsr2l
  2690   000D48  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2691   000D4A  0011               	retfie		f
  2692   000D4C                     __end_of_INTERRUPT_InterruptManagerLow:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _displayISR *****************
  2696 ;; Defined at:
  2697 ;;		line 66 in file "displayKeyTickCPU.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;		None
  2700 ;; Auto vars:     Size  Location     Type
  2701 ;;		None
  2702 ;; Return value:  Size  Location     Type
  2703 ;;                  1    wreg      void 
  2704 ;; Registers used:
  2705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2706 ;; Tracked objects:
  2707 ;;		On entry : 0/0
  2708 ;;		On exit  : 0/0
  2709 ;;		Unchanged: 0/0
  2710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2711 ;;      Params:         0       0       0       0       0       0       0
  2712 ;;      Locals:         0       0       0       0       0       0       0
  2713 ;;      Temps:          2       0       0       0       0       0       0
  2714 ;;      Totals:         2       0       0       0       0       0       0
  2715 ;;Total ram usage:        2 bytes
  2716 ;; Hardware stack levels used: 1
  2717 ;; Hardware stack levels required when called: 1
  2718 ;; This function calls:
  2719 ;;		_plusOneWithModulo
  2720 ;;		i2___lwmod
  2721 ;; This function is called by:
  2722 ;;		_INTERRUPT_InterruptManagerLow
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text21
  2727   0008EA                     __ptext21:
  2728                           	callstack 0
  2729   0008EA                     _displayISR:
  2730                           	callstack 25
  2731   0008EA                     
  2732                           ;displayKeyTickCPU.c: 68:     static unsigned int uiTickCount = 0;;displayKeyTickCPU.c: 
      +                          69:     static unsigned char ucDispIndx = 0;;displayKeyTickCPU.c: 70:     static unsigne
      +                          d char keyStatus = 0;;displayKeyTickCPU.c: 72:     static unsigned char keyStateSaved = 
      +                          0;;displayKeyTickCPU.c: 73:     static unsigned char keyPressCounter = 0;;displayKeyTick
      +                          CPU.c: 75:     if (uiTickCount < 500 - 7 - 1) {
  2733   0008EA  0EEC               	movlw	236
  2734   0008EC  5C09               	subwf	displayISR@uiTickCount^0,w,c
  2735   0008EE  0E01               	movlw	1
  2736   0008F0  580A               	subwfb	(displayISR@uiTickCount+1)^0,w,c
  2737   0008F2  B0D8               	btfsc	status,0,c
  2738   0008F4  EF7E  F004         	goto	i2u133_41
  2739   0008F8  EF80  F004         	goto	i2u133_40
  2740   0008FC                     i2u133_41:
  2741   0008FC  EF84  F004         	goto	i2l2253
  2742   000900                     i2u133_40:
  2743   000900                     
  2744                           ;displayKeyTickCPU.c: 76:         uiTickCount++;
  2745   000900  4A09               	infsnz	displayISR@uiTickCount^0,f,c
  2746   000902  2A0A               	incf	(displayISR@uiTickCount+1)^0,f,c
  2747                           
  2748                           ;displayKeyTickCPU.c: 77:     } else {
  2749   000904  EF8C  F004         	goto	i2l2255
  2750   000908                     i2l2253:
  2751                           
  2752                           ;displayKeyTickCPU.c: 78:         uiTickCount = 0;
  2753   000908  0E00               	movlw	0
  2754   00090A  6E0A               	movwf	(displayISR@uiTickCount+1)^0,c
  2755   00090C  0E00               	movlw	0
  2756   00090E  6E09               	movwf	displayISR@uiTickCount^0,c
  2757                           
  2758                           ;displayKeyTickCPU.c: 79:         tick1000mSec = 1;
  2759   000910  0E01               	movlw	1
  2760   000912  6E29               	movwf	_tick1000mSec^0,c
  2761                           
  2762                           ;displayKeyTickCPU.c: 80:         tick1000mSec2 = 1;
  2763   000914  0E01               	movlw	1
  2764   000916  6E19               	movwf	_tick1000mSec2^0,c
  2765   000918                     i2l2255:
  2766                           
  2767                           ;displayKeyTickCPU.c: 82:     if ((uiTickCount % 250) == 0) {
  2768   000918  C009  F034         	movff	displayISR@uiTickCount,i2___lwmod@dividend
  2769   00091C  C00A  F035         	movff	displayISR@uiTickCount+1,i2___lwmod@dividend+1
  2770   000920  0E00               	movlw	0
  2771   000922  6E37               	movwf	(i2___lwmod@divisor+1)^0,c
  2772   000924  0EFA               	movlw	250
  2773   000926  6E36               	movwf	i2___lwmod@divisor^0,c
  2774   000928  ECD8  F006         	call	i2___lwmod	;wreg free
  2775   00092C  5034               	movf	?i2___lwmod^0,w,c
  2776   00092E  1035               	iorwf	(?i2___lwmod+1)^0,w,c
  2777   000930  A4D8               	btfss	status,2,c
  2778   000932  EF9D  F004         	goto	i2u134_41
  2779   000936  EF9F  F004         	goto	i2u134_40
  2780   00093A                     i2u134_41:
  2781   00093A  EFAC  F004         	goto	i2l2259
  2782   00093E                     i2u134_40:
  2783   00093E                     
  2784                           ;displayKeyTickCPU.c: 83:         bToggleBitSlow = !bToggleBitSlow;
  2785   00093E  5016               	movf	_bToggleBitSlow^0,w,c
  2786   000940  B4D8               	btfsc	status,2,c
  2787   000942  EFA5  F004         	goto	i2u135_41
  2788   000946  EFA8  F004         	goto	i2u135_40
  2789   00094A                     i2u135_41:
  2790   00094A  0E01               	movlw	1
  2791   00094C  EFA9  F004         	goto	i2u136_40
  2792   000950                     i2u135_40:
  2793   000950  0E00               	movlw	0
  2794   000952                     i2u136_40:
  2795   000952  6E16               	movwf	_bToggleBitSlow^0,c
  2796                           
  2797                           ;displayKeyTickCPU.c: 84:         tick500mSec = 1;
  2798   000954  0E01               	movlw	1
  2799   000956  6E1A               	movwf	_tick500mSec^0,c
  2800   000958                     i2l2259:
  2801                           
  2802                           ;displayKeyTickCPU.c: 86:     if ((uiTickCount % 125) == 0) {
  2803   000958  C009  F034         	movff	displayISR@uiTickCount,i2___lwmod@dividend
  2804   00095C  C00A  F035         	movff	displayISR@uiTickCount+1,i2___lwmod@dividend+1
  2805   000960  0E00               	movlw	0
  2806   000962  6E37               	movwf	(i2___lwmod@divisor+1)^0,c
  2807   000964  0E7D               	movlw	125
  2808   000966  6E36               	movwf	i2___lwmod@divisor^0,c
  2809   000968  ECD8  F006         	call	i2___lwmod	;wreg free
  2810   00096C  5034               	movf	?i2___lwmod^0,w,c
  2811   00096E  1035               	iorwf	(?i2___lwmod+1)^0,w,c
  2812   000970  A4D8               	btfss	status,2,c
  2813   000972  EFBD  F004         	goto	i2u137_41
  2814   000976  EFBF  F004         	goto	i2u137_40
  2815   00097A                     i2u137_41:
  2816   00097A  EFCC  F004         	goto	i2l2263
  2817   00097E                     i2u137_40:
  2818   00097E                     
  2819                           ;displayKeyTickCPU.c: 87:         bToggleBitFast = !bToggleBitFast;
  2820   00097E  5017               	movf	_bToggleBitFast^0,w,c
  2821   000980  B4D8               	btfsc	status,2,c
  2822   000982  EFC5  F004         	goto	i2u138_41
  2823   000986  EFC8  F004         	goto	i2u138_40
  2824   00098A                     i2u138_41:
  2825   00098A  0E01               	movlw	1
  2826   00098C  EFC9  F004         	goto	i2u139_40
  2827   000990                     i2u138_40:
  2828   000990  0E00               	movlw	0
  2829   000992                     i2u139_40:
  2830   000992  6E17               	movwf	_bToggleBitFast^0,c
  2831                           
  2832                           ;displayKeyTickCPU.c: 88:         tick250mSec = 1;
  2833   000994  0E01               	movlw	1
  2834   000996  6E28               	movwf	_tick250mSec^0,c
  2835   000998                     i2l2263:
  2836                           
  2837                           ;displayKeyTickCPU.c: 99:     LATBbits.LATB7 = 1;
  2838   000998  8E8A               	bsf	138,7,c	;volatile
  2839   00099A                     
  2840                           ;displayKeyTickCPU.c: 100:     LATBbits.LATB6 = 1;
  2841   00099A  8C8A               	bsf	138,6,c	;volatile
  2842   00099C                     
  2843                           ;displayKeyTickCPU.c: 101:     LATBbits.LATB5 = 1;
  2844   00099C  8A8A               	bsf	138,5,c	;volatile
  2845   00099E                     
  2846                           ;displayKeyTickCPU.c: 102:     LATBbits.LATB4 = 1;
  2847   00099E  888A               	bsf	138,4,c	;volatile
  2848   0009A0                     
  2849                           ;displayKeyTickCPU.c: 105:     LATD = ~(*(pucReadDispBuffer + ucDispIndx));
  2850   0009A0  5015               	movf	displayISR@ucDispIndx^0,w,c
  2851   0009A2  244D               	addwf	_pucReadDispBuffer^0,w,c
  2852   0009A4  6ED9               	movwf	fsr2l,c
  2853   0009A6  0E00               	movlw	0
  2854   0009A8  204E               	addwfc	(_pucReadDispBuffer+1)^0,w,c
  2855   0009AA  6EDA               	movwf	fsr2h,c
  2856   0009AC  50DF               	movf	indf2,w,c
  2857   0009AE  0AFF               	xorlw	255
  2858   0009B0  6E8C               	movwf	140,c	;volatile
  2859   0009B2                     
  2860                           ;displayKeyTickCPU.c: 107:     if (0 == ucDispIndx) {
  2861   0009B2  5015               	movf	displayISR@ucDispIndx^0,w,c
  2862   0009B4  A4D8               	btfss	status,2,c
  2863   0009B6  EFDF  F004         	goto	i2u140_41
  2864   0009BA  EFE1  F004         	goto	i2u140_40
  2865   0009BE                     i2u140_41:
  2866   0009BE  EFE4  F004         	goto	i2l2277
  2867   0009C2                     i2u140_40:
  2868   0009C2                     
  2869                           ;displayKeyTickCPU.c: 108:         LATBbits.LATB7 = 0;
  2870   0009C2  9E8A               	bcf	138,7,c	;volatile
  2871                           
  2872                           ;displayKeyTickCPU.c: 109:     } else if (1 == ucDispIndx) {
  2873   0009C4  EF05  F005         	goto	i2l210
  2874   0009C8                     i2l2277:
  2875   0009C8  0415               	decf	displayISR@ucDispIndx^0,w,c
  2876   0009CA  A4D8               	btfss	status,2,c
  2877   0009CC  EFEA  F004         	goto	i2u141_41
  2878   0009D0  EFEC  F004         	goto	i2u141_40
  2879   0009D4                     i2u141_41:
  2880   0009D4  EFEF  F004         	goto	i2l2281
  2881   0009D8                     i2u141_40:
  2882   0009D8                     
  2883                           ;displayKeyTickCPU.c: 110:         LATBbits.LATB6 = 0;
  2884   0009D8  9C8A               	bcf	138,6,c	;volatile
  2885                           
  2886                           ;displayKeyTickCPU.c: 111:     } else if (2 == ucDispIndx) {
  2887   0009DA  EF05  F005         	goto	i2l210
  2888   0009DE                     i2l2281:
  2889   0009DE  0E02               	movlw	2
  2890   0009E0  1815               	xorwf	displayISR@ucDispIndx^0,w,c
  2891   0009E2  A4D8               	btfss	status,2,c
  2892   0009E4  EFF6  F004         	goto	i2u142_41
  2893   0009E8  EFF8  F004         	goto	i2u142_40
  2894   0009EC                     i2u142_41:
  2895   0009EC  EFFB  F004         	goto	i2l2285
  2896   0009F0                     i2u142_40:
  2897   0009F0                     
  2898                           ;displayKeyTickCPU.c: 112:         LATBbits.LATB5 = 0;
  2899   0009F0  9A8A               	bcf	138,5,c	;volatile
  2900                           
  2901                           ;displayKeyTickCPU.c: 113:     } else if (3 == ucDispIndx) {
  2902   0009F2  EF05  F005         	goto	i2l210
  2903   0009F6                     i2l2285:
  2904   0009F6  0E03               	movlw	3
  2905   0009F8  1815               	xorwf	displayISR@ucDispIndx^0,w,c
  2906   0009FA  A4D8               	btfss	status,2,c
  2907   0009FC  EF02  F005         	goto	i2u143_41
  2908   000A00  EF04  F005         	goto	i2u143_40
  2909   000A04                     i2u143_41:
  2910   000A04  EF05  F005         	goto	i2l210
  2911   000A08                     i2u143_40:
  2912   000A08                     
  2913                           ;displayKeyTickCPU.c: 114:         LATBbits.LATB4 = 0;
  2914   000A08  988A               	bcf	138,4,c	;volatile
  2915   000A0A                     i2l210:
  2916                           
  2917                           ;displayKeyTickCPU.c: 116:     if (!PORTBbits.RB1)
  2918   000A0A  B281               	btfsc	129,1,c	;volatile
  2919   000A0C  EF0A  F005         	goto	i2u144_41
  2920   000A10  EF0C  F005         	goto	i2u144_40
  2921   000A14                     i2u144_41:
  2922   000A14  EF1C  F005         	goto	i2l2291
  2923   000A18                     i2u144_40:
  2924   000A18                     
  2925                           ;displayKeyTickCPU.c: 117:         keyStatus |= (0x01 << ucDispIndx);
  2926   000A18  C015  F03B         	movff	displayISR@ucDispIndx,??_displayISR
  2927   000A1C  0E01               	movlw	1
  2928   000A1E  6E3C               	movwf	(??_displayISR+1)^0,c
  2929   000A20  2A3B               	incf	??_displayISR^0,f,c
  2930   000A22  EF15  F005         	goto	i2u145_44
  2931   000A26                     i2u145_45:
  2932   000A26  90D8               	bcf	status,0,c
  2933   000A28  363C               	rlcf	(??_displayISR+1)^0,f,c
  2934   000A2A                     i2u145_44:
  2935   000A2A  2E3B               	decfsz	??_displayISR^0,f,c
  2936   000A2C  EF13  F005         	goto	i2u145_45
  2937   000A30  503C               	movf	(??_displayISR+1)^0,w,c
  2938   000A32  1214               	iorwf	displayISR@keyStatus^0,f,c
  2939   000A34  EF2B  F005         	goto	i2l2293
  2940   000A38                     i2l2291:
  2941                           
  2942                           ;displayKeyTickCPU.c: 119:         keyStatus &= ~(0x01 << ucDispIndx);
  2943   000A38  C015  F03B         	movff	displayISR@ucDispIndx,??_displayISR
  2944   000A3C  0E01               	movlw	1
  2945   000A3E  6E3C               	movwf	(??_displayISR+1)^0,c
  2946   000A40  2A3B               	incf	??_displayISR^0,f,c
  2947   000A42  EF25  F005         	goto	i2u146_44
  2948   000A46                     i2u146_45:
  2949   000A46  90D8               	bcf	status,0,c
  2950   000A48  363C               	rlcf	(??_displayISR+1)^0,f,c
  2951   000A4A                     i2u146_44:
  2952   000A4A  2E3B               	decfsz	??_displayISR^0,f,c
  2953   000A4C  EF23  F005         	goto	i2u146_45
  2954   000A50  503C               	movf	(??_displayISR+1)^0,w,c
  2955   000A52  0AFF               	xorlw	255
  2956   000A54  1614               	andwf	displayISR@keyStatus^0,f,c
  2957   000A56                     i2l2293:
  2958                           
  2959                           ;displayKeyTickCPU.c: 121:     ucDispIndx = plusOneWithModulo(ucDispIndx, 4);
  2960   000A56  0E04               	movlw	4
  2961   000A58  6E34               	movwf	plusOneWithModulo@modulo_val^0,c
  2962   000A5A  5015               	movf	displayISR@ucDispIndx^0,w,c
  2963   000A5C  EC77  F007         	call	_plusOneWithModulo
  2964   000A60  6E15               	movwf	displayISR@ucDispIndx^0,c
  2965   000A62                     
  2966                           ;displayKeyTickCPU.c: 122:     if (ucDispIndx == 0) {
  2967   000A62  5015               	movf	displayISR@ucDispIndx^0,w,c
  2968   000A64  A4D8               	btfss	status,2,c
  2969   000A66  EF37  F005         	goto	i2u147_41
  2970   000A6A  EF39  F005         	goto	i2u147_40
  2971   000A6E                     i2u147_41:
  2972   000A6E  EF7A  F005         	goto	i2l225
  2973   000A72                     i2u147_40:
  2974   000A72                     
  2975                           ;displayKeyTickCPU.c: 126:         keyDown |= (~keyStateSaved & keyStatus);
  2976   000A72  5013               	movf	displayISR@keyStateSaved^0,w,c
  2977   000A74  0AFF               	xorlw	255
  2978   000A76  1414               	andwf	displayISR@keyStatus^0,w,c
  2979   000A78  1227               	iorwf	_keyDown^0,f,c
  2980   000A7A                     
  2981                           ;displayKeyTickCPU.c: 127:         keyStateSaved = keyStatus;
  2982   000A7A  C014  F013         	movff	displayISR@keyStatus,displayISR@keyStateSaved
  2983   000A7E                     
  2984                           ;displayKeyTickCPU.c: 128:         if (keyStatus) {
  2985   000A7E  5014               	movf	displayISR@keyStatus^0,w,c
  2986   000A80  B4D8               	btfsc	status,2,c
  2987   000A82  EF45  F005         	goto	i2u148_41
  2988   000A86  EF47  F005         	goto	i2u148_40
  2989   000A8A                     i2u148_41:
  2990   000A8A  EF50  F005         	goto	i2l2309
  2991   000A8E                     i2u148_40:
  2992   000A8E                     
  2993                           ;displayKeyTickCPU.c: 129:             if (--keyPressCounter == 0) {
  2994   000A8E  2E12               	decfsz	displayISR@keyPressCounter^0,f,c
  2995   000A90  EF52  F005         	goto	i2l221
  2996   000A94                     
  2997                           ;displayKeyTickCPU.c: 130:                 keyPressCounter = 50;
  2998   000A94  0E32               	movlw	50
  2999   000A96  6E12               	movwf	displayISR@keyPressCounter^0,c
  3000   000A98                     
  3001                           ;displayKeyTickCPU.c: 131:                 keyHold |= keyStatus;
  3002   000A98  5014               	movf	displayISR@keyStatus^0,w,c
  3003   000A9A  1226               	iorwf	_keyHold^0,f,c
  3004   000A9C  EF52  F005         	goto	i2l221
  3005   000AA0                     i2l2309:
  3006                           
  3007                           ;displayKeyTickCPU.c: 134:             keyPressCounter = 50;
  3008   000AA0  0E32               	movlw	50
  3009   000AA2  6E12               	movwf	displayISR@keyPressCounter^0,c
  3010   000AA4                     i2l221:
  3011                           
  3012                           ;displayKeyTickCPU.c: 137:         if (bRequestBufferReleaseForWriting) {
  3013   000AA4  501B               	movf	_bRequestBufferReleaseForWriting^0,w,c	;volatile
  3014   000AA6  B4D8               	btfsc	status,2,c
  3015   000AA8  EF58  F005         	goto	i2u149_41
  3016   000AAC  EF5A  F005         	goto	i2u149_40
  3017   000AB0                     i2u149_41:
  3018   000AB0  EF7A  F005         	goto	i2l225
  3019   000AB4                     i2u149_40:
  3020   000AB4                     
  3021                           ;displayKeyTickCPU.c: 138:             if (bUseDispBuffer1ForReading) {
  3022   000AB4  501C               	movf	_bUseDispBuffer1ForReading^0,w,c	;volatile
  3023   000AB6  B4D8               	btfsc	status,2,c
  3024   000AB8  EF60  F005         	goto	i2u150_41
  3025   000ABC  EF62  F005         	goto	i2u150_40
  3026   000AC0                     i2u150_41:
  3027   000AC0  EF6E  F005         	goto	i2l2319
  3028   000AC4                     i2u150_40:
  3029   000AC4                     
  3030                           ;displayKeyTickCPU.c: 139:                 bUseDispBuffer1ForReading = 0;
  3031   000AC4  0E00               	movlw	0
  3032   000AC6  6E1C               	movwf	_bUseDispBuffer1ForReading^0,c	;volatile
  3033   000AC8                     
  3034                           ;displayKeyTickCPU.c: 140:                 pucDispBuffer = (unsigned char *) &ucDispBuff
      +                          er1;
  3035   000AC8  0E2F               	movlw	low _ucDispBuffer1
  3036   000ACA  6E53               	movwf	_pucDispBuffer^0,c
  3037   000ACC  0E00               	movlw	high _ucDispBuffer1
  3038   000ACE  6E54               	movwf	(_pucDispBuffer+1)^0,c
  3039   000AD0                     
  3040                           ;displayKeyTickCPU.c: 141:                 pucReadDispBuffer = (unsigned char *) &ucDisp
      +                          Buffer2;
  3041   000AD0  0E2B               	movlw	low _ucDispBuffer2
  3042   000AD2  6E4D               	movwf	_pucReadDispBuffer^0,c
  3043   000AD4  0E00               	movlw	high _ucDispBuffer2
  3044   000AD6  6E4E               	movwf	(_pucReadDispBuffer+1)^0,c
  3045                           
  3046                           ;displayKeyTickCPU.c: 142:             } else {
  3047   000AD8  EF78  F005         	goto	i2l224
  3048   000ADC                     i2l2319:
  3049                           
  3050                           ;displayKeyTickCPU.c: 143:                 bUseDispBuffer1ForReading = 1;
  3051   000ADC  0E01               	movlw	1
  3052   000ADE  6E1C               	movwf	_bUseDispBuffer1ForReading^0,c	;volatile
  3053   000AE0                     
  3054                           ;displayKeyTickCPU.c: 144:                 pucDispBuffer = (unsigned char *) &ucDispBuff
      +                          er2;
  3055   000AE0  0E2B               	movlw	low _ucDispBuffer2
  3056   000AE2  6E53               	movwf	_pucDispBuffer^0,c
  3057   000AE4  0E00               	movlw	high _ucDispBuffer2
  3058   000AE6  6E54               	movwf	(_pucDispBuffer+1)^0,c
  3059   000AE8                     
  3060                           ;displayKeyTickCPU.c: 145:                 pucReadDispBuffer = (unsigned char *) &ucDisp
      +                          Buffer1;
  3061   000AE8  0E2F               	movlw	low _ucDispBuffer1
  3062   000AEA  6E4D               	movwf	_pucReadDispBuffer^0,c
  3063   000AEC  0E00               	movlw	high _ucDispBuffer1
  3064   000AEE  6E4E               	movwf	(_pucReadDispBuffer+1)^0,c
  3065   000AF0                     i2l224:
  3066                           
  3067                           ;displayKeyTickCPU.c: 147:             bRequestBufferReleaseForWriting = 0;
  3068   000AF0  0E00               	movlw	0
  3069   000AF2  6E1B               	movwf	_bRequestBufferReleaseForWriting^0,c	;volatile
  3070   000AF4                     i2l225:
  3071   000AF4  0012               	return		;funcret
  3072   000AF6                     __end_of_displayISR:
  3073                           	callstack 0
  3074                           
  3075 ;; *************** function i2___lwmod *****************
  3076 ;; Defined at:
  3077 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\lwmod.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  dividend        2    0[COMRAM] unsigned int 
  3080 ;;  divisor         2    2[COMRAM] unsigned int 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  counter         1    4[COMRAM] unsigned char 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  2    0[COMRAM] unsigned int 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3092 ;;      Params:         4       0       0       0       0       0       0
  3093 ;;      Locals:         1       0       0       0       0       0       0
  3094 ;;      Temps:          0       0       0       0       0       0       0
  3095 ;;      Totals:         5       0       0       0       0       0       0
  3096 ;;Total ram usage:        5 bytes
  3097 ;; Hardware stack levels used: 1
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_displayISR
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text22
  3106   000DB0                     __ptext22:
  3107                           	callstack 0
  3108   000DB0                     i2___lwmod:
  3109                           	callstack 25
  3110   000DB0  5036               	movf	i2___lwmod@divisor^0,w,c
  3111   000DB2  1037               	iorwf	(i2___lwmod@divisor+1)^0,w,c
  3112   000DB4  B4D8               	btfsc	status,2,c
  3113   000DB6  EFDF  F006         	goto	i2u130_41
  3114   000DBA  EFE1  F006         	goto	i2u130_40
  3115   000DBE                     i2u130_41:
  3116   000DBE  EF05  F007         	goto	i2l1057
  3117   000DC2                     i2u130_40:
  3118   000DC2  0E01               	movlw	1
  3119   000DC4  6E38               	movwf	i2___lwmod@counter^0,c
  3120   000DC6  EFE9  F006         	goto	i2l2239
  3121   000DCA                     i2l2237:
  3122   000DCA  90D8               	bcf	status,0,c
  3123   000DCC  3636               	rlcf	i2___lwmod@divisor^0,f,c
  3124   000DCE  3637               	rlcf	(i2___lwmod@divisor+1)^0,f,c
  3125   000DD0  2A38               	incf	i2___lwmod@counter^0,f,c
  3126   000DD2                     i2l2239:
  3127   000DD2  AE37               	btfss	(i2___lwmod@divisor+1)^0,7,c
  3128   000DD4  EFEE  F006         	goto	i2u131_41
  3129   000DD8  EFF0  F006         	goto	i2u131_40
  3130   000DDC                     i2u131_41:
  3131   000DDC  EFE5  F006         	goto	i2l2237
  3132   000DE0                     i2u131_40:
  3133   000DE0                     i2l2241:
  3134   000DE0  5036               	movf	i2___lwmod@divisor^0,w,c
  3135   000DE2  5C34               	subwf	i2___lwmod@dividend^0,w,c
  3136   000DE4  5037               	movf	(i2___lwmod@divisor+1)^0,w,c
  3137   000DE6  5835               	subwfb	(i2___lwmod@dividend+1)^0,w,c
  3138   000DE8  A0D8               	btfss	status,0,c
  3139   000DEA  EFF9  F006         	goto	i2u132_41
  3140   000DEE  EFFB  F006         	goto	i2u132_40
  3141   000DF2                     i2u132_41:
  3142   000DF2  EFFF  F006         	goto	i2l2245
  3143   000DF6                     i2u132_40:
  3144   000DF6  5036               	movf	i2___lwmod@divisor^0,w,c
  3145   000DF8  5E34               	subwf	i2___lwmod@dividend^0,f,c
  3146   000DFA  5037               	movf	(i2___lwmod@divisor+1)^0,w,c
  3147   000DFC  5A35               	subwfb	(i2___lwmod@dividend+1)^0,f,c
  3148   000DFE                     i2l2245:
  3149   000DFE  90D8               	bcf	status,0,c
  3150   000E00  3237               	rrcf	(i2___lwmod@divisor+1)^0,f,c
  3151   000E02  3236               	rrcf	i2___lwmod@divisor^0,f,c
  3152   000E04  2E38               	decfsz	i2___lwmod@counter^0,f,c
  3153   000E06  EFF0  F006         	goto	i2l2241
  3154   000E0A                     i2l1057:
  3155   000E0A  C034  F034         	movff	i2___lwmod@dividend,?i2___lwmod
  3156   000E0E  C035  F035         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  3157   000E12  0012               	return		;funcret
  3158   000E14                     __end_ofi2___lwmod:
  3159                           	callstack 0
  3160                           
  3161 ;; *************** function _plusOneWithModulo *****************
  3162 ;; Defined at:
  3163 ;;		line 534 in file "displayKeyTickCPU.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  val             1    wreg     unsigned char 
  3166 ;;  modulo_val      1    0[COMRAM] const unsigned char 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  val             1    6[COMRAM] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      unsigned char 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3178 ;;      Params:         1       0       0       0       0       0       0
  3179 ;;      Locals:         1       0       0       0       0       0       0
  3180 ;;      Temps:          5       0       0       0       0       0       0
  3181 ;;      Totals:         7       0       0       0       0       0       0
  3182 ;;Total ram usage:        7 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_displayISR
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text23
  3192   000EEE                     __ptext23:
  3193                           	callstack 0
  3194   000EEE                     _plusOneWithModulo:
  3195                           	callstack 25
  3196                           
  3197                           ;incstack = 0
  3198                           ;plusOneWithModulo@val stored from wreg
  3199   000EEE  6E3A               	movwf	plusOneWithModulo@val^0,c
  3200   000EF0                     
  3201                           ;displayKeyTickCPU.c: 535:     if (val < modulo_val - 1) {
  3202   000EF0  0EFF               	movlw	255
  3203   000EF2  2434               	addwf	plusOneWithModulo@modulo_val^0,w,c
  3204   000EF4  6E35               	movwf	??_plusOneWithModulo^0,c
  3205   000EF6  6A36               	clrf	(??_plusOneWithModulo+1)^0,c
  3206   000EF8  0EFF               	movlw	255
  3207   000EFA  2236               	addwfc	(??_plusOneWithModulo+1)^0,f,c
  3208   000EFC  503A               	movf	plusOneWithModulo@val^0,w,c
  3209   000EFE  6E37               	movwf	(??_plusOneWithModulo+2)^0,c
  3210   000F00  6A38               	clrf	(??_plusOneWithModulo+3)^0,c
  3211   000F02  5035               	movf	??_plusOneWithModulo^0,w,c
  3212   000F04  5C37               	subwf	(??_plusOneWithModulo+2)^0,w,c
  3213   000F06  5038               	movf	(??_plusOneWithModulo+3)^0,w,c
  3214   000F08  0A80               	xorlw	128
  3215   000F0A  6E39               	movwf	(??_plusOneWithModulo+4)^0,c
  3216   000F0C  5036               	movf	(??_plusOneWithModulo+1)^0,w,c
  3217   000F0E  0A80               	xorlw	128
  3218   000F10  5839               	subwfb	(??_plusOneWithModulo+4)^0,w,c
  3219   000F12  B0D8               	btfsc	status,0,c
  3220   000F14  EF8E  F007         	goto	i2u119_41
  3221   000F18  EF90  F007         	goto	i2u119_40
  3222   000F1C                     i2u119_41:
  3223   000F1C  EF94  F007         	goto	i2l2155
  3224   000F20                     i2u119_40:
  3225   000F20                     
  3226                           ;displayKeyTickCPU.c: 536:         return ++val;
  3227   000F20  2A3A               	incf	plusOneWithModulo@val^0,f,c
  3228   000F22  503A               	movf	plusOneWithModulo@val^0,w,c
  3229   000F24  EF95  F007         	goto	i2l337
  3230   000F28                     i2l2155:
  3231                           
  3232                           ;displayKeyTickCPU.c: 538:     return 0;
  3233   000F28  0E00               	movlw	0
  3234   000F2A                     i2l337:
  3235   000F2A  0012               	return		;funcret
  3236   000F2C                     __end_of_plusOneWithModulo:
  3237                           	callstack 0
  3238                           
  3239                           	psect	rparam
  3240   000000                     
  3241                           	psect	temp
  3242   000055                     btemp:
  3243                           	callstack 0
  3244   000055                     	ds	1
  3245   000000                     int$flags	set	btemp
  3246   000000                     wtemp8	set	btemp+1
  3247   000000                     ttemp5	set	btemp+1
  3248   000000                     ttemp6	set	btemp+4
  3249   000000                     ttemp7	set	btemp+8
  3250                           
  3251                           	psect	idloc
  3252                           
  3253                           ;Config register IDLOC0 @ 0x200000
  3254                           ;	unspecified, using default values
  3255   200000                     	org	2097152
  3256   200000  FF                 	db	255
  3257                           
  3258                           ;Config register IDLOC1 @ 0x200001
  3259                           ;	unspecified, using default values
  3260   200001                     	org	2097153
  3261   200001  FF                 	db	255
  3262                           
  3263                           ;Config register IDLOC2 @ 0x200002
  3264                           ;	unspecified, using default values
  3265   200002                     	org	2097154
  3266   200002  FF                 	db	255
  3267                           
  3268                           ;Config register IDLOC3 @ 0x200003
  3269                           ;	unspecified, using default values
  3270   200003                     	org	2097155
  3271   200003  FF                 	db	255
  3272                           
  3273                           ;Config register IDLOC4 @ 0x200004
  3274                           ;	unspecified, using default values
  3275   200004                     	org	2097156
  3276   200004  FF                 	db	255
  3277                           
  3278                           ;Config register IDLOC5 @ 0x200005
  3279                           ;	unspecified, using default values
  3280   200005                     	org	2097157
  3281   200005  FF                 	db	255
  3282                           
  3283                           ;Config register IDLOC6 @ 0x200006
  3284                           ;	unspecified, using default values
  3285   200006                     	org	2097158
  3286   200006  FF                 	db	255
  3287                           
  3288                           ;Config register IDLOC7 @ 0x200007
  3289                           ;	unspecified, using default values
  3290   200007                     	org	2097159
  3291   200007  FF                 	db	255
  3292                           
  3293                           	psect	config
  3294                           
  3295                           ; Padding undefined space
  3296   300000                     	org	3145728
  3297   300000  FF                 	db	255
  3298                           
  3299                           ;Config register CONFIG1H @ 0x300001
  3300                           ;	Oscillator Selection bits
  3301                           ;	OSC = HS, HS oscillator
  3302                           ;	Fail-Safe Clock Monitor Enable bit
  3303                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3304                           ;	Internal/External Oscillator Switchover bit
  3305                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3306   300001                     	org	3145729
  3307   300001  02                 	db	2
  3308                           
  3309                           ;Config register CONFIG2L @ 0x300002
  3310                           ;	Power-up Timer Enable bit
  3311                           ;	PWRT = ON, PWRT enabled
  3312                           ;	Brown-out Reset Enable bits
  3313                           ;	BOREN = ON, Brown-out Reset enabled and controlled by software (SBOREN is enabled)
  3314                           ;	Brown Out Reset Voltage bits
  3315                           ;	BORV = 2, 
  3316   300002                     	org	3145730
  3317   300002  12                 	db	18
  3318                           
  3319                           ;Config register CONFIG2H @ 0x300003
  3320                           ;	Watchdog Timer Enable bit
  3321                           ;	WDT = ON, WDT enabled
  3322                           ;	Watchdog Timer Postscale Select bits
  3323                           ;	WDTPS = 1024, 1:1024
  3324   300003                     	org	3145731
  3325   300003  15                 	db	21
  3326                           
  3327                           ; Padding undefined space
  3328   300004                     	org	3145732
  3329   300004  FF                 	db	255
  3330                           
  3331                           ;Config register CONFIG3H @ 0x300005
  3332                           ;	CCP2 MUX bit
  3333                           ;	CCP2MX = PORTBE, CCP2 input/output is multiplexed with RB3
  3334                           ;	PORTB A/D Enable bit
  3335                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3336                           ;	Low-Power Timer1 Oscillator Enable bit
  3337                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3338                           ;	MCLR Pin Enable bit
  3339                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3340   300005                     	org	3145733
  3341   300005  80                 	db	128
  3342                           
  3343                           ;Config register CONFIG4L @ 0x300006
  3344                           ;	Stack Full/Underflow Reset Enable bit
  3345                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3346                           ;	Single-Supply ICSP Enable bit
  3347                           ;	LVP = OFF, Single-Supply ICSP disabled
  3348                           ;	Extended Instruction Set Enable bit
  3349                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3350                           ;	Background Debugger Enable bit
  3351                           ;	DEBUG = 0x1, unprogrammed default
  3352   300006                     	org	3145734
  3353   300006  81                 	db	129
  3354                           
  3355                           ; Padding undefined space
  3356   300007                     	org	3145735
  3357   300007  FF                 	db	255
  3358                           
  3359                           ;Config register CONFIG5L @ 0x300008
  3360                           ;	Code Protection bit
  3361                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3362                           ;	Code Protection bit
  3363                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3364                           ;	Code Protection bit
  3365                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3366                           ;	Code Protection bit
  3367                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3368   300008                     	org	3145736
  3369   300008  0F                 	db	15
  3370                           
  3371                           ;Config register CONFIG5H @ 0x300009
  3372                           ;	Boot Block Code Protection bit
  3373                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3374                           ;	Data EEPROM Code Protection bit
  3375                           ;	CPD = OFF, Data EEPROM not code-protected
  3376   300009                     	org	3145737
  3377   300009  C0                 	db	192
  3378                           
  3379                           ;Config register CONFIG6L @ 0x30000A
  3380                           ;	Write Protection bit
  3381                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3382                           ;	Write Protection bit
  3383                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3384                           ;	Write Protection bit
  3385                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3386                           ;	Write Protection bit
  3387                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3388   30000A                     	org	3145738
  3389   30000A  0F                 	db	15
  3390                           
  3391                           ;Config register CONFIG6H @ 0x30000B
  3392                           ;	Configuration Register Write Protection bit
  3393                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3394                           ;	Boot Block Write Protection bit
  3395                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3396                           ;	Data EEPROM Write Protection bit
  3397                           ;	WRTD = OFF, Data EEPROM not write-protected
  3398   30000B                     	org	3145739
  3399   30000B  E0                 	db	224
  3400                           
  3401                           ;Config register CONFIG7L @ 0x30000C
  3402                           ;	Table Read Protection bit
  3403                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3404                           ;	Table Read Protection bit
  3405                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3406                           ;	Table Read Protection bit
  3407                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3408                           ;	Table Read Protection bit
  3409                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3410   30000C                     	org	3145740
  3411   30000C  0F                 	db	15
  3412                           
  3413                           ;Config register CONFIG7H @ 0x30000D
  3414                           ;	Boot Block Table Read Protection bit
  3415                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3416   30000D                     	org	3145741
  3417   30000D  40                 	db	64
  3418                           tosu	equ	0xFFF
  3419                           tosh	equ	0xFFE
  3420                           tosl	equ	0xFFD
  3421                           stkptr	equ	0xFFC
  3422                           pclatu	equ	0xFFB
  3423                           pclath	equ	0xFFA
  3424                           pcl	equ	0xFF9
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           indf0	equ	0xFEF
  3432                           postinc0	equ	0xFEE
  3433                           postdec0	equ	0xFED
  3434                           preinc0	equ	0xFEC
  3435                           plusw0	equ	0xFEB
  3436                           fsr0h	equ	0xFEA
  3437                           fsr0l	equ	0xFE9
  3438                           wreg	equ	0xFE8
  3439                           indf1	equ	0xFE7
  3440                           postinc1	equ	0xFE6
  3441                           postdec1	equ	0xFE5
  3442                           preinc1	equ	0xFE4
  3443                           plusw1	equ	0xFE3
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           bsr	equ	0xFE0
  3447                           indf2	equ	0xFDF
  3448                           postinc2	equ	0xFDE
  3449                           postdec2	equ	0xFDD
  3450                           preinc2	equ	0xFDC
  3451                           plusw2	equ	0xFDB
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    39
    Data        6
    BSS         51
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     25      84
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    writeByte@buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SetPoint(COMRAM[1]), 

    readByte@buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SetPoint(COMRAM[1]), 

    checkAndInrDcrChar@value	PTR unsigned char  size(2) Largest target is 1
		 -> SetPoint(COMRAM[1]), 

    pucDispBuffer	PTR unsigned char  size(2) Largest target is 4
		 -> NULL(NULL[0]), ucDispBuffer2(COMRAM[4]), ucDispBuffer1(COMRAM[4]), 

    pucReadDispBuffer	PTR unsigned char  size(2) Largest target is 4
		 -> ucDispBuffer2(COMRAM[4]), ucDispBuffer1(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_displayInt
    _main->_writeByte
    _writeByte->_DATAEE_WriteByte
    _initVariables->_readByte
    _readByte->_DATAEE_ReadByte
    _displayInt->___lwdiv

Critical Paths under _INTERRUPT_InterruptManagerLow in COMRAM

    _INTERRUPT_InterruptManagerLow->_displayISR
    _displayISR->_plusOneWithModulo

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5208
                                             23 COMRAM     2     2      0
                  _SYSTEM_Initialize
                 _checkAndInrDcrChar
                        _digitAssign
                       _directAssign
                            _display
                         _displayInt
                      _initVariables
                          _writeByte
 ---------------------------------------------------------------------------------
 (1) _writeByte                                            9     5      4     463
                                             14 COMRAM     9     5      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     3     2      1     143
                                             11 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _initVariables                                        0     0      0     342
                           _readByte
 ---------------------------------------------------------------------------------
 (2) _readByte                                             9     5      4     342
                                             12 COMRAM     9     5      4
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _displayInt                                           5     2      3    2987
                                             18 COMRAM     5     2      3
                            ___lwdiv
                            ___lwmod
                              _clear
                        _digitAssign
                _directOrWithDisplay
 ---------------------------------------------------------------------------------
 (2) _directOrWithDisplay                                  2     1      1     218
                                             11 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _digitAssign                                          2     1      1     674
                                             11 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _clear                                                1     1      0      68
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     815
                                             11 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     618
                                             11 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _directAssign                                         2     1      1     294
                                             11 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _checkAndInrDcrChar                                   5     1      4     448
                                             11 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
                        _initDisplay
              _initExternalInterrupt
                         _initTimer0
 ---------------------------------------------------------------------------------
 (2) _initTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initExternalInterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initDisplay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManagerLow                        2     2      0     405
                                              9 COMRAM     2     2      0
                         _displayISR
 ---------------------------------------------------------------------------------
 (5) _displayISR                                           2     2      0     405
                                              7 COMRAM     2     2      0
                  _plusOneWithModulo
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (6) i2___lwmod                                            5     1      4     263
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _plusOneWithModulo                                    7     6      1     142
                                              0 COMRAM     7     6      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _initDisplay
     _initExternalInterrupt
     _initTimer0
   _checkAndInrDcrChar
   _digitAssign
   _directAssign
   _display
   _displayInt
     ___lwdiv
     ___lwmod
     _clear
     _digitAssign
     _directOrWithDisplay
   _initVariables
     _readByte
       _DATAEE_ReadByte
   _writeByte
     _DATAEE_WriteByte

 _INTERRUPT_InterruptManagerLow (ROOT)
   _displayISR
     _plusOneWithModulo
     i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      34        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     19      54       1       66.7%
BITBIGSFRhlh        19      0       0      18        0.0%
BITBIGSFRlhhll       9      0       0      24        0.0%
BITBIGSFRlllh        8      0       0      31        0.0%
BITBIGSFRhhh         7      0       0      16        0.0%
BITBIGSFRlhlll       7      0       0      29        0.0%
BITBIGSFRlhhlhh      5      0       0      22        0.0%
BITBIGSFRllh         5      0       0      30        0.0%
BITBIGSFRlhhh        4      0       0      21        0.0%
BITBIGSFRlhlhll      3      0       0      28        0.0%
BITBIGSFRlhlhhl      2      0       0      26        0.0%
BITBIGSFRhllh        2      0       0      19        0.0%
BITBIGSFRhhl         2      0       0      17        0.0%
BITBIGSFRlhlhlh      1      0       0      27        0.0%
BITBIGSFRlhlhhh      1      0       0      25        0.0%
BITBIGSFRlhhlhl      1      0       0      23        0.0%
BITBIGSFRhlll        1      0       0      20        0.0%
BITBIGSFRllll        1      0       0      32        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      54      33        0.0%
DATA                 0      0      54       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Apr 01 11:11:58 2023

                       ??_directAssign 0040                                     l87 10D4  
                                   l98 10C0                        _timer0ReloadVal 002A  
          plusOneWithModulo@modulo_val 0034                                    l104 0F9E  
                                  l116 0716                                    l125 0890  
                                  l134 08A4                                    l231 108A  
                                  l135 08A6                                    l119 0740  
                                  l240 1022                                    l136 08BA  
                                  l137 08BC                                    l138 08D0  
                                  l235 109A                                    l228 0FFC  
                                  l420 1084                                    l255 106A  
                                  l247 1046                                    l432 10CA  
                                  l530 0EE0                                    l259 0FD0  
                                  l531 0EEC                                    l269 0BBA  
                                  l294 0C70                                    l534 10AE  
                                  l528 0ED2                                    l289 0C18  
                                  l553 0E60                                    l547 0EAC  
                                  _PR2 0FCB             directOrWithDisplay@digitNo 003F  
                                  _fps 000D                                    wreg 0FE8  
            _bUseDispBuffer1ForReading 001C           checkAndInrDcrChar@lowerLimit 0042  
                          _statusByte0 0022                            _statusByte1 0021  
                                 l2101 0FD6                                   l1054 0CE4  
                                 l2111 0FE0                                   l2103 0FD8  
                                 l1047 0CDC                                   l1064 0DAE  
                                 l2113 0FE2                                   l2105 0FDA  
                                 l2121 1070                                   l2201 0C94  
                                 l1057 0DA6                                   l2115 0FE8  
                                 l2107 0FDC                                   l2131 10C2  
                                 l2123 107C                                   l2211 0CCE  
                                 l2203 0C9C                                   l2117 0FF0  
                                 l2109 0FDE                                   l2125 107E  
                                 l2213 0CD0                                   l2205 0CAA  
                                 l2221 0D66                                   l2141 0E84  
                                 l2133 0E62                                   l2127 1080  
                                 l2119 106C                                   l2215 0CD6  
                                 l2207 0CB0                                   l2231 0DA0  
                                 l2223 0D6E                                   l2135 0E6E  
                                 l2143 0E88                                   l2129 1082  
                                 l2209 0CC6                                   l2225 0D7C  
                                 l2217 0D4C                                   l2145 0FA2  
                                 l2081 109E                                   l2137 0E7E  
                                 l2401 0E32                                   l2331 10BC  
                                 l2411 105A                                   l2227 0D92  
                                 l2219 0D5E                                   l2147 0FB2  
                                 l2171 1026                                   l2091 10AA  
                                 l2083 10A2                                   l2139 0E80  
                                 l2403 0E36                                   l2325 10B0  
                                 l2413 1086                                   l2229 0D9A  
                                 l2165 1002                                   l2173 1036  
                                 l2341 0AF6                                   l2093 10AC  
                                 l2085 10A4                                   l2333 0F66  
                                 l2181 0EC0                                   l2405 0E38  
                                 l2501 078E                                   l2327 10B4  
                                 l2167 1010                                   l2159 0FFE  
                                 l2351 0B2A                                   l2343 0AFA  
                                 l2087 10A6                                   l2335 0F7A  
                                 l2191 0ECC                                   l2183 0EC2  
                                 l2175 0EB0                                   l2407 0E3C  
                                 l2511 07B4                                   l2503 0794  
                                 l2097 10D2                                   l2329 10B8  
                                 l2409 104A                                   l2169 1012  
                                 l2353 0B34                                   l2345 0AFE  
                                 l2089 10A8                                   l2337 0F8A  
                                 l2193 0ED0                                   l2185 0EC4  
                                 l2177 0EB8                                   l2521 07E6  
                                 l2513 07C2                                   l2505 0796  
                                 l2441 0632                                   l2099 0FD2  
                                 l2371 0BBC                                   l2195 0C72  
                                 l2363 0B8E                                   l2355 0B56  
                                 l2339 0F9A                                   l2187 0EC6  
                                 l2179 0EBC                                   l2531 0816  
                                 l2523 07EA                                   l2515 07CE  
                                 l2507 07A0                                   l2451 063E  
                                 l2443 0634                                   l2435 062A  
                                 l2381 0C08                                   l2373 0BCA  
                                 l2197 0C7A                                   l2365 0B90  
                                 l2357 0B66                                   l2349 0B12  
                                 l2189 0EC8                                   l2533 0824  
                                 l2525 07F2                                   l2517 07DC  
                                 l2509 07AA                                   l2461 066E  
                                 l2453 0642                                   l2445 0636  
                                 l2437 062E                                   l2391 0C56  
                                 l2375 0BD8                                   l2199 0C8C  
                                 l2359 0B78                                   l2367 0BA0  
                                 l2551 08D2                                   l2535 0832  
                                 l2527 07F4                                   l2519 07E4  
                                 l2543 085E                                   l2471 06BC  
                                 l2463 067E                                   l2455 0646  
                                 l2447 0638                                   l2439 0630  
                                 l2393 0C64                                   l2385 0C26  
                                 l2377 0BE0                                   l2369 0BB0  
                                 l2553 08DC                                   l2545 089E  
                                 l2537 083E                                   l2529 0808  
                                 l2481 070E                                   l2473 06D8  
                                 l2465 0694                                   l2457 0656  
                                 l2449 063A                                   l2387 0C34  
                                 l2379 0BFA                                   l2547 08B4  
                                 l2539 0856                                   l2491 0746  
                                 l2483 0726                                   l2467 06A6  
                                 l2459 066A                                   l2475 06E4  
                                 l2389 0C3C                                   l2397 0E14  
                                 l2549 08CA                                   l2709 0872  
                                 l2493 0756                                   l2485 0728  
                                 l2469 06B2                                   l2477 06E6  
                                 l2399 0E20                                   l2495 0764  
                                 l2487 0738                                   l2479 06F6  
                                 l2497 0778                                   l2489 073A  
                                 l2499 0786                                   u1200 1022  
                                 u1201 101E                                   u1210 1036  
                                 u1211 1032                                   u1220 0EE0  
                                 u1221 0EDC                                   u1240 0C8C  
                                 u1241 0C88                                   u1250 0CAA  
                                 u1170 0EAC                                   u1251 0CA6  
                                 u1171 0EA8                                   u1235 0EEA  
                                 u1260 0CC6                                   u1180 0FB2  
                                 u1236 0EEC                                   u1261 0CC2  
                                 u1181 0FAE                                   u1270 0D5E  
                                 u1510 0F8A                                   u1271 0D5A  
                                 u1511 0F86                                   u1600 0BD8  
                                 u1280 0D7C                                   u1520 0F9A  
                                 _LATD 0F8C                                   u1601 0BD4  
                                 u1281 0D78                                   u1521 0F96  
                                 u1610 0BFA                                   u1290 0D92  
                                 u1530 0B0E                                   u1611 0BF6  
                                 u1291 0D8E                                   u1531 0B0A  
                                 u1620 0C26                                   u1540 0B66  
                                 u1621 0C22                                   u1541 0B62  
                                 u1630 0C34                                   u1550 0B78  
                                 u1631 0C30                                   u1551 0B74  
                                 u1640 0C56                                   u1560 0B8A  
                                 u1800 0738                                   u1720 0656  
                                 u1641 0C52                                   u1561 0B86  
                                 u1801 0734                                   u1721 0652  
                                 u1570 0BA0                                   u1650 0E60  
                                 u1810 0764                                   u1730 066A  
                                 u1571 0B9C                                   u1651 0E5C  
                                 u1811 0760                                   u1731 0666  
                                 u1660 105A                                   u1580 0BB0  
                                 u1820 0786                                   u1740 0694  
                                 u1661 1056                                   u1581 0BAC  
                                 u1821 0782                                   u1741 0690  
                                 u1590 0BCA                                   u1670 109A  
                                 u1830 07C2                                   u1750 06A6  
                                 u1591 0BC6                                   u1671 1096  
                                 u1831 07BE                                   u1751 06A2  
                                 u1840 07DC                                   u1760 06D8  
                                 u1841 07D8                                   u1761 06D4  
                                 u1850 0824                                   u1770 06F6  
                                 u1851 0820                                   u1771 06F2  
                                 u1860 0832                                   u1780 070E  
                                 u1861 082E                                   u1781 070A  
                                 u1870 089E                                   u1790 0726  
                                 u1871 089A                                   u1791 0722  
                                 u1880 08B4                                   u1881 08B0  
                                 u1890 08CA                                   u1891 08C6  
                          _outputLatch 001E                                   i2l92 0D1A  
                                 i2l95 0D40                            displayInt@i 004A  
                                 _main 062A                                   fsr2h 0FDA  
                                 indf2 0FDF                                   fsr1l 0FE1  
                                 fsr2l 0FD9                                   btemp 0055  
                                 start 000E                           ?_initDisplay 0034  
                         ___param_bank 0000                             _iADCValCh1 0003  
                           _iADCValCh2 0001                                  ?_main 0034  
                                _ADRES 0FC3                                  _EEADR 0FA9  
                        _ucDispBuffer1 002F                          _ucDispBuffer2 002B  
                                _T0CON 0FD5                                  _T2CON 0FCA  
                                _T3CON 0FB1                        __end_of___lwdiv 0CE6  
                      __end_of___lwmod 0DB0                                  i2l210 0A0A  
                                i2l221 0AA4                                  i2l224 0AF0  
                                i2l225 0AF4                                  i2l337 0F2A  
                                _TMR0H 0FD7                                  _TMR0L 0FD6  
                                _TMR3H 0FB3                                  _TMR3L 0FB2  
                                _SPBRG 0FAF                                  _TRISA 0F92  
                                _TRISD 0F95           checkAndInrDcrChar@upperLimit 0041  
                      __end_of_display 109C                        _DATAEE_ReadByte 109C  
                                _clear 0FFE                                  tablat 0FF5  
                                ttemp5 0056                                  ttemp6 0059  
                                ttemp7 005D                                  status 0FD8  
                                wtemp8 0056         ?_INTERRUPT_InterruptManagerLow 0034  
                  directAssign@digitNo 003F                        __initialization 0F2C  
                         __end_of_main 08EA                                 ??_main 004B  
                        __activetblptr 0002                                 ?_clear 0034  
                               _ADCON0 0FC2                                 _ADCON1 0FC1  
                               _ADCON2 0FC0                                 _EEDATA 0FA8  
                               _CCPR1L 0FBE                                 _EECON2 0FA7  
                 __end_of_directAssign 106C                                 i2l1064 0E12  
                               i2l1057 0E0A                                 i2l2301 0A7E  
                               i2l2151 0F20                                 i2l2311 0AB4  
                               i2l2303 0A8E                                 i2l2241 0DE0  
                               i2l2233 0DB0                                 i2l2321 0AE0  
                               i2l2313 0AC4                                 i2l2305 0A94  
                               i2l2155 0F28                                 i2l2243 0DF6  
                               i2l2235 0DC2                                 i2l2323 0AE8  
                               i2l2315 0AC8                                 i2l2307 0A98  
                               i2l2251 0900                                 i2l2149 0EF0  
                               i2l2245 0DFE                                 i2l2237 0DCA  
                               i2l2317 0AD0                                 i2l2309 0AA0  
                               i2l2261 097E                                 i2l2253 0908  
                               i2l2421 0D0C                                 i2l2247 0E04  
                               i2l2239 0DD2                                 i2l2319 0ADC  
                               i2l2271 09A0                                 i2l2263 0998  
                               i2l2255 0918                                 i2l2431 0D3A  
                               i2l2423 0D10                                 i2l2281 09DE  
                               i2l2273 09B2                                 i2l2265 099A  
                               i2l2257 093E                                 i2l2249 08EA  
                               i2l2433 0D3E                                 i2l2425 0D14  
                               i2l2417 0CF0                                 i2l2291 0A38  
                               i2l2283 09F0                                 i2l2275 09C2  
                               i2l2267 099C                                 i2l2259 0958  
                               i2l2427 0D28                                 i2l2419 0CFE  
                               i2l2293 0A56                                 i2l2285 09F6  
                               i2l2277 09C8                                 i2l2269 099E  
                               i2l2429 0D36                                 i2l2295 0A62  
                               i2l2287 0A08                                 i2l2279 09D8  
                               i2l2297 0A72                                 i2l2289 0A18  
                               i2l2299 0A7A                                 _TABLAT 0FF5  
                               _LVDCON 0FD2                          _outputCounter 004F  
                   _checkAndInrDcrChar 0BBC                    ?_checkAndInrDcrChar 003F  
                        _ucScanChannel 0011                ??_initExternalInterrupt 003F  
                            ??___lwdiv 0043                              ??___lwmod 0043  
                               _filter 0005                       __end_of_readByte 0EAE  
                               clear@i 003F                                 clear_0 0F52  
                               _uiTemp 000B                                 isa$std 0001  
              __end_of_DATAEE_ReadByte 10B0                              ??_display 003F  
                         __pdataCOMRAM 004D                           __mediumconst 0000  
                    __end_ofi2___lwmod 0E14                                 tblptrh 0FF7  
                               tblptrl 0FF6                                 tblptru 0FF8  
                 ??_checkAndInrDcrChar 0043                      _SYSTEM_Initialize 10B0  
                           __accesstop 0080                __end_of__initialization 0F58  
                        _initVariables 0F66                     ?_SYSTEM_Initialize 0034  
                        ___rparam_used 0001                displayISR@keyStateSaved 0013  
                   i2___lwmod@dividend 0034                         __pcstackCOMRAM 0034  
                  ??_SYSTEM_Initialize 003F                   __end_of_int2sevenSeg 0628  
                        __end_of_clear 1024                       _DATAEE_WriteByte 0EAE  
                 plusOneWithModulo@val 003A                digitAssign@segmentValue 0040  
                        _tick1000mSec2 0019                                ??_clear 003F  
            __end_of_SYSTEM_Initialize 10C2                             _alarmLatch 001D  
                       ?_initVariables 0034                             __pnvCOMRAM 0053  
                              _CCP1CON 0FBD                      displayInt@hexData 0046  
                     ?_DATAEE_ReadByte 0034                      _plusOneWithModulo 0EEE  
      directOrWithDisplay@segmentValue 0040                     ?_plusOneWithModulo 0034  
                              _TBLPTRH 0FF7                                _TBLPTRL 0FF6  
                              _TBLPTRU 0FF8                             _displayISR 08EA  
                           _displayInt 0AF6                             _fpsCounter 000F  
                  ??_plusOneWithModulo 0035                           readByte@addr 0042  
                 DATAEE_WriteByte@bAdd 0040                              ?_readByte 0040  
                         _sec60Counter 0052                                __Hparam 0000  
                              __Lparam 0000                             _initTimer0 106C  
                              ___lwdiv 0C72                                ___lwmod 0D4C  
                           _ucPassword 0051                           __psmallconst 0600  
                  _directOrWithDisplay 1024                           _directAssign 1048  
                              __pcinit 0F2C              __end_of_plusOneWithModulo 0F2C  
                              __ramtop 0600                                __ptext0 062A  
                              __ptext1 0E14                                __ptext2 0EAE  
                              __ptext3 0F66                                __ptext4 0E62  
                              __ptext5 109C                                __ptext6 0AF6  
                              __ptext7 1024                                __ptext8 0FA0  
                              __ptext9 0FFE                         displayInt@temp 0049  
                              _display 1086                              _T0CONbits 0FD5  
                              _keyDown 0027                                _keyHold 0026  
                       __pintcode_body 0CE6                   end_of_initialization 0F58  
                      ??_initVariables 0049                           _dispSubState 0023  
                 ?_directOrWithDisplay 003F                             ??_readByte 0044  
                        __Lmediumconst 0000                                int_func 0CE6  
             directAssign@segmentValue 0040                          ??_digitAssign 0040  
                            _RCSTAbits 0FAB                                postdec1 0FE5  
                              postinc0 0FEE                                postinc2 0FDE  
                        _interruptFlag 0020          __end_of_initExternalInterrupt 10CC  
                            _PORTBbits 0F81                      __end_of_writeByte 0E62  
                            _TRISAbits 0F92                              _TRISBbits 0F93  
                            _TRISCbits 0F94                            ?_displayISR 0034  
                          ?_displayInt 0046                           _int2sevenSeg 0601  
                ??_directOrWithDisplay 0040               __end_of_DATAEE_WriteByte 0EEE  
                            i2___lwmod 0DB0                            _CCP1CONbits 0FBD  
                            _TXSTAbits 0FAC                         readByte@nBytes 0043  
                       readByte@buffer 0040                            ?_initTimer0 0034  
         __end_of_INTERRUPT_Initialize 10D6                          __pidataCOMRAM 10CC  
                  __end_of_digitAssign 0FD2                          _pucDispBuffer 0053  
              checkAndInrDcrChar@value 003F              displayISR@keyPressCounter 0012  
                  start_initialization 0F2C                             ?i2___lwmod 0034  
                  DATAEE_ReadByte@bAdd 003F                          ??_initDisplay 003F  
                          __pbssCOMRAM 0001                      _interruptFlagDisp 001F  
                    i2___lwmod@divisor 0036                      i2___lwmod@counter 0038  
                         _tick1000mSec 0029                           _tick3000mSec 0018  
                     ___lwdiv@dividend 003F                              __pintcode 0008  
                          _digitAssign 0FA0                               ?___lwdiv 003F  
                             ?___lwmod 003F                     digitAssign@digitNo 003F  
                  __end_of_initDisplay 0FFE                               ?_display 0034  
                          __smallconst 0600                       ___lwdiv@quotient 0043  
                          ??i2___lwmod 0038                   _INTERRUPT_Initialize 10D2  
                displayInt@dotPosition 0048                               _LATBbits 0F8A  
                             _LATCbits 0F8B                               _IPR1bits 0F9F  
                             _IPR2bits 0FA2                               _PIE1bits 0F9D  
                             _PIE2bits 0FA0                               i2u130_40 0DC2  
                             i2u130_41 0DBE                               i2u131_40 0DE0  
                             i2u131_41 0DDC                               i2u132_40 0DF6  
                             i2u140_40 09C2                               i2u132_41 0DF2  
                             i2u140_41 09BE                               i2u141_40 09D8  
                             i2u133_40 0900                               i2u141_41 09D4  
                             i2u133_41 08FC                               i2u150_40 0AC4  
                             i2u142_40 09F0                               i2u134_40 093E  
                             i2u150_41 0AC0                               i2u142_41 09EC  
                             i2u134_41 093A                               i2u119_40 0F20  
                             i2u143_40 0A08                               i2u135_40 0950  
                             i2u119_41 0F1C                               i2u143_41 0A04  
                             i2u135_41 094A                               i2u144_40 0A18  
                             i2u136_40 0952                               i2u144_41 0A14  
                             i2u137_40 097E                               i2u137_41 097A  
                             i2u145_44 0A2A                               i2u145_45 0A26  
                             i2u138_40 0990                               i2u170_40 0D28  
                             i2u138_41 098A                               i2u170_41 0D24  
                             i2u146_44 0A4A                               i2u146_45 0A46  
                             i2u147_40 0A72                               i2u139_40 0992  
                             i2u171_40 0D36                               i2u147_41 0A6E  
                             i2u171_41 0D32                               i2u148_40 0A8E  
                             i2u148_41 0A8A                               i2u149_40 0AB4  
                             i2u149_41 0AB0                               i2u168_40 0CFE  
                             i2u168_41 0CFA                               i2u169_40 0D0C  
                             i2u169_41 0D08                               _PIR1bits 0F9E  
                             _PIR2bits 0FA1                               _RCONbits 0FD0  
                          _filterCount 0007                             _ADCON0bits 0FC2  
                    _pucReadDispBuffer 004D                  DATAEE_WriteByte@bData 003F  
                         ??_displayISR 003B                           ??_displayInt 0049  
                            _writeByte 0E14                            _INTCON2bits 0FF1  
                            copy_data0 0F40                  ?_INTERRUPT_Initialize 0034  
                    ?_DATAEE_WriteByte 003F                  __end_of_initVariables 0FA0  
                   ??_DATAEE_WriteByte 0040                             _EECON1bits 0FA6  
                             _SetPoint 0033                               __Hrparam 0000  
                            readByte@i 0047                               __Lrparam 0000  
                          _initDisplay 0FD2                           ??_initTimer0 003F  
                   __end_of_displayISR 0AF6                     __end_of_displayInt 0BBC  
                         _selectedIndx 0025                  _initExternalInterrupt 10C2  
          __end_of_directOrWithDisplay 1048        ??_INTERRUPT_InterruptManagerLow 003D  
                      ___lwdiv@divisor 0041                            _tick250mSec 0028  
                          _tick500mSec 001A                        ___lwdiv@counter 0045  
                        _dispMainState 0024                               __ptext10 0D4C  
                             __ptext11 0C72                               __ptext12 1086  
                             __ptext21 08EA                               __ptext13 1048  
                             __ptext22 0DB0                               __ptext14 0BBC  
                             __ptext23 0EEE                               __ptext15 10B0  
                             __ptext16 106C                               __ptext17 10C2  
                             __ptext18 0FD2                               __ptext19 10D2  
                           ?_writeByte 0042            DATAEE_WriteByte@GIEBitValue 0041  
                   __end_of_initTimer0 1086                        writeByte@nBytes 0045  
                             _readByte 0E62                        writeByte@buffer 0042  
                    ??_DATAEE_ReadByte 003F                               isa$xinst 0000  
                           writeByte@i 0049                               int$flags 0055  
                displayISR@uiTickCount 0009                             _INTCONbits 0FF2  
                 displayISR@ucDispIndx 0015             __end_of_checkAndInrDcrChar 0C72  
               ??_INTERRUPT_Initialize 003F                         _bToggleBitFast 0017  
                             intlevel2 0000                         _bToggleBitSlow 0016  
                     ___lwmod@dividend 003F                             _LVDCONbits 0FD2  
                         ?_digitAssign 003F                          ?_directAssign 003F  
               ?_initExternalInterrupt 0034                    displayISR@keyStatus 0014  
                      ___lwmod@divisor 0041                          writeByte@addr 0044  
                      ___lwmod@counter 0043                            ??_writeByte 0046  
__end_of_INTERRUPT_InterruptManagerLow 0D4C          _INTERRUPT_InterruptManagerLow 0008  
      _bRequestBufferReleaseForWriting 001B  
